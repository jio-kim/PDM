<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.ssangyong.mapper.WeldPoint2ndMapper">

	<delete id="deleteWeldPointRawData" parameterType="java.util.HashMap">
		DELETE WELD_POINT_RAW
		WHERE PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
			AND PART_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
	</delete>
	
	<insert id="insertWeldPointRawDataRow" parameterType="java.util.HashMap">
		INSERT INTO WELD_POINT_RAW
		(
			PART_ITEM_ID,
			PART_REV_ID,
			ECO_ID,
			FEATURE_NAME,
			WELD_TYPE,
			SECURE_TYPE,
			START_PX,
			START_PY,
			START_PZ,
			END_PX,
			END_PY,
			END_PZ,
			WELD_LENGTH,
			SHEETS,
			CREATE_DATE
		)
		VALUES (
			#{part_item_id, jdbcType=VARCHAR},
			#{part_rev_id, jdbcType=VARCHAR},
			#{eco_id, jdbcType=VARCHAR},
			#{feature_name, jdbcType=VARCHAR},
			#{weld_type, jdbcType=VARCHAR},
			#{secure_type, jdbcType=VARCHAR},
			#{start_point_x, jdbcType=NUMERIC},
			#{start_point_y, jdbcType=NUMERIC},
			#{start_point_z, jdbcType=NUMERIC},
			#{end_point_x, jdbcType=NUMERIC},
			#{end_point_y, jdbcType=NUMERIC},
			#{end_point_z, jdbcType=NUMERIC},
			#{weld_length, jdbcType=NUMERIC},
			#{sheets, jdbcType=NUMERIC},
			sysdate
		)
	</insert>
	
	<delete id="deleteWeldPointRaw2Data" parameterType="java.util.HashMap">
		DELETE WELD_POINT_RAW2
		WHERE PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
			AND PART_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
	</delete>
	
	<select id="makeArrangedStartPointData" resultType="java.util.HashMap">
		INSERT INTO WELD_POINT_RAW2 (
			PART_ITEM_ID,
			PART_REV_ID,
			ECO_ID,
			FEATURE_NAME,
			WELD_TYPE,
			SECURE_TYPE,
			START_PX,
			START_PY,
			START_PZ,
			END_PX,
			END_PY,
			END_PZ,
			WELD_LENGTH,
			SHEETS,
			CREATE_DATE,
			REVERSE_FLAG
		)
		SELECT *
		FROM (
		WITH ABS_BASE_POINT AS (
				SELECT -9000.0 AS START_PX,
					-9000.0 AS START_PY,
					-9000.0 AS START_PZ,
					-9000.0 AS END_PX,
					-9000.0 AS END_PY,
					-9000.0 AS END_PZ
				FROM DUAL
			),
			WELD_POINT_RAW_1ST AS (
				SELECT 
					WELD_POINT_RAW.*,
					SQRT (
						POWER ( ( WELD_POINT_RAW.START_PX - ABS_BASE_POINT.START_PX), 2)
						+ POWER ( ( WELD_POINT_RAW.START_PY - ABS_BASE_POINT.START_PY), 2)
						+ POWER ( ( WELD_POINT_RAW.START_PZ - ABS_BASE_POINT.START_PZ), 2)
					) AS START_DEFF,
					SQRT (
						POWER ( ( WELD_POINT_RAW.END_PX - ABS_BASE_POINT.END_PX), 2)
						+ POWER ( ( WELD_POINT_RAW.END_PY - ABS_BASE_POINT.END_PY), 2)
						+ POWER ( ( WELD_POINT_RAW.END_PZ - ABS_BASE_POINT.END_PZ), 2)
					)  AS END_DEFF
				FROM WELD_POINT_RAW, ABS_BASE_POINT
				WHERE PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
					AND PART_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
			),
			WELD_POINT_RAW_2ND AS (
				SELECT
					WELD_POINT_RAW_1ST.*,
					DECODE (
						SIGN (END_DEFF - START_DEFF),
						-1, 'REVERSE',
		                NULL
					) AS REVERSE_FLAG
				FROM WELD_POINT_RAW_1ST
			)
			(
				SELECT WELD_POINT_RAW_2ND.PART_ITEM_ID,
					WELD_POINT_RAW_2ND.PART_REV_ID,
					WELD_POINT_RAW_2ND.ECO_ID,
					WELD_POINT_RAW_2ND.FEATURE_NAME,
					WELD_POINT_RAW_2ND.WELD_TYPE,
					WELD_POINT_RAW_2ND.SECURE_TYPE,
					WELD_POINT_RAW_2ND.START_PX,
					WELD_POINT_RAW_2ND.START_PY,
					WELD_POINT_RAW_2ND.START_PZ,
					WELD_POINT_RAW_2ND.END_PX,
					WELD_POINT_RAW_2ND.END_PY,
					WELD_POINT_RAW_2ND.END_PZ,
					WELD_POINT_RAW_2ND.WELD_LENGTH,
					WELD_POINT_RAW_2ND.SHEETS,
					WELD_POINT_RAW_2ND.CREATE_DATE,
					NULL AS REVERSE_FLAG
				FROM WELD_POINT_RAW_2ND
				WHERE TRIM (WELD_POINT_RAW_2ND.WELD_TYPE) <![CDATA[<>]]> 'CO2'
				UNION
				SELECT WELD_POINT_RAW_2ND.PART_ITEM_ID,
					WELD_POINT_RAW_2ND.PART_REV_ID,
					WELD_POINT_RAW_2ND.ECO_ID,
					WELD_POINT_RAW_2ND.FEATURE_NAME,
					WELD_POINT_RAW_2ND.WELD_TYPE,
					WELD_POINT_RAW_2ND.SECURE_TYPE,
					WELD_POINT_RAW_2ND.END_PX AS START_PX,
					WELD_POINT_RAW_2ND.END_PY AS START_PY,
					WELD_POINT_RAW_2ND.END_PZ AS START_PZ,
					WELD_POINT_RAW_2ND.START_PX AS END_PX,
					WELD_POINT_RAW_2ND.START_PY AS END_PY,
					WELD_POINT_RAW_2ND.START_PZ AS END_PZ,
					WELD_POINT_RAW_2ND.WELD_LENGTH,
					WELD_POINT_RAW_2ND.SHEETS,
					WELD_POINT_RAW_2ND.CREATE_DATE,
					WELD_POINT_RAW_2ND.REVERSE_FLAG
				FROM WELD_POINT_RAW_2ND
				WHERE TRIM (WELD_POINT_RAW_2ND.WELD_TYPE) = 'CO2'
					AND WELD_POINT_RAW_2ND.REVERSE_FLAG = 'REVERSE'
				UNION
				SELECT WELD_POINT_RAW_2ND.PART_ITEM_ID,
					WELD_POINT_RAW_2ND.PART_REV_ID,
					WELD_POINT_RAW_2ND.ECO_ID,
					WELD_POINT_RAW_2ND.FEATURE_NAME,
					WELD_POINT_RAW_2ND.WELD_TYPE,
					WELD_POINT_RAW_2ND.SECURE_TYPE,
					WELD_POINT_RAW_2ND.END_PX AS START_PX,
					WELD_POINT_RAW_2ND.END_PY AS START_PY,
					WELD_POINT_RAW_2ND.END_PZ AS START_PZ,
					WELD_POINT_RAW_2ND.START_PX AS END_PX,
					WELD_POINT_RAW_2ND.START_PY AS END_PY,
					WELD_POINT_RAW_2ND.START_PZ AS END_PZ,
					WELD_POINT_RAW_2ND.WELD_LENGTH,
					WELD_POINT_RAW_2ND.SHEETS,
					WELD_POINT_RAW_2ND.CREATE_DATE,
					WELD_POINT_RAW_2ND.REVERSE_FLAG
				FROM WELD_POINT_RAW_2ND
				WHERE TRIM (WELD_POINT_RAW_2ND.WELD_TYPE) = 'CO2'
					AND WELD_POINT_RAW_2ND.REVERSE_FLAG IS NULL
			)
		)
	</select>
	
	<update id="updateArrangedStartPointDataScaling" parameterType="java.util.HashMap">
		UPDATE WELD_POINT_RAW2
		SET START_PX=START_PX * #{scale, jdbcType=NUMERIC}, 
			START_PY=START_PY * #{scale, jdbcType=NUMERIC}, 
			START_PZ=START_PZ * #{scale, jdbcType=NUMERIC},
			END_PX=END_PX * #{scale, jdbcType=NUMERIC}, 
			END_PY=END_PY * #{scale, jdbcType=NUMERIC},
			END_PZ=END_PZ * #{scale, jdbcType=NUMERIC}
		WHERE PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
			AND PART_REV_ID =  #{part_rev_id, jdbcType=VARCHAR}
	</update>
	
	<select id="getECOId" resultType="java.util.HashMap">
		SELECT DISTINCT ECO_ID AS ECO_ID
		FROM WELD_POINT_RAW
		WHERE PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
		    AND PART_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
    </select>

	<delete id="deleteCurrentSavedData" parameterType="java.util.HashMap">
		DELETE WELD_POINT_SAVED
		WHERE PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
			AND PART_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
	</delete>
	
	<delete id="deleteCurrentInboundData" parameterType="java.util.HashMap">
		DELETE WELD_POINT_INBOUND
		WHERE PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
			AND NEW_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
	</delete>

	<select id="makeInBoundData" resultType="java.util.HashMap">
		INSERT INTO WELD_POINT_INBOUND (PART_ITEM_ID,
			OLD_REV_ID,
			OLD_ECO_ID,
			OLD_FEATURE_NAME,
			NEW_REV_ID,
			NEW_ECO_ID,
			NEW_FEATURE_NAME,
			WELD_TYPE,
			SECURE_TYPE,
			SHEETS,
			OLD_START_PX,
			OLD_START_PY,
			OLD_START_PZ,
			OLD_END_PX,
			OLD_END_PY,
			OLD_END_PZ,
			OLD_WELD_LENGTH,
			OLD_OCC_NAME,
			OLD_OCC_UID,
			OCC_THREAD_UID,
			NEW_START_PX,
			NEW_START_PY,
			NEW_START_PZ,
			NEW_END_PX,
			NEW_END_PY,
			NEW_END_PZ,
			NEW_WELD_LENGTH,
			START_DIFF,
			END_DIFF,
			OLD_REVERSE_FLAG,
			NEW_REVERSE_FLAG,
			CHANGE_MEMO,
			CREATE_DATE
		)
		SELECT DISTINCT
			OLD_DATA.PART_ITEM_ID AS PART_ITEM_ID,
			OLD_DATA.OLD_PART_REV_ID AS OLD_REV_ID,
			OLD_DATA.old_eco_id AS OLD_ECO_ID,
			OLD_DATA.FEATURE_NAME AS OLD_FEATURE_NAME,
			NEW_DATA.PART_REV_ID AS NEW_REV_ID,
			NEW_DATA.ECO_ID AS NEW_ECO_ID,
			NEW_DATA.FEATURE_NAME AS NEW_FEATURE_NAME,
			OLD_DATA.WELD_TYPE AS WELD_TYPE,
			OLD_DATA.SECURE_TYPE AS SECURE_TYPE,
			OLD_DATA.SHEETS AS SHEETS,
			OLD_DATA.START_PX AS OLD_START_PX,
			OLD_DATA.START_PY AS OLD_START_PY,
			OLD_DATA.START_PZ AS OLD_START_PZ,
			OLD_DATA.END_PX AS OLD_END_PX,
			OLD_DATA.END_PY AS OLD_END_PY,
			OLD_DATA.END_PZ AS OLD_END_PZ,
			OLD_DATA.WELD_LENGTH AS OLD_WELD_LENGTH,
			OLD_DATA.OCC_NAME AS OLD_OCC_NAME,
			OLD_DATA.OCC_UID AS OLD_OCC_UID,
			OLD_DATA.OCC_THREAD_UID AS OCC_THREAD_UID,
			NEW_DATA.START_PX AS NEW_START_PX,
			NEW_DATA.START_PY AS NEW_START_PY,
			NEW_DATA.START_PZ AS NEW_START_PZ,
			NEW_DATA.END_PX AS NEW_END_PX,
			NEW_DATA.END_PY AS NEW_END_PY,
			NEW_DATA.END_PZ AS NEW_END_PZ,
			NEW_DATA.WELD_LENGTH AS NEW_WELD_LENGTH,
			SQRT (
				POWER ( (NEW_DATA.START_PX - OLD_DATA.START_PX), 2)
				+ POWER ( (NEW_DATA.START_PY - OLD_DATA.START_PY), 2)
				+ POWER ( (NEW_DATA.START_PZ - OLD_DATA.START_PZ), 2))
			AS START_DIFF,
			SQRT (
				POWER ( (NEW_DATA.END_PX - OLD_DATA.END_PX), 2)
				+ POWER ( (NEW_DATA.END_PY - OLD_DATA.END_PY), 2)
				+ POWER ( (NEW_DATA.END_PZ - OLD_DATA.END_PZ), 2))
			AS END_DIFF,
			OLD_DATA.REVERSE_FLAG AS OLD_REVERSE_FLAG,
			NEW_DATA.REVERSE_FLAG AS NEW_REVERSE_FLAG,
			'IN_BOUND' AS CHANGE_MEMO,
			SYSDATE AS CREATE_DATE
		FROM WELD_POINT_RAW2 NEW_DATA, WELD_POINT_BOM_R2 OLD_DATA
		WHERE NEW_DATA.PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
			AND NEW_DATA.PART_ITEM_ID = OLD_DATA.PART_ITEM_ID
			AND NEW_DATA.PART_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
			AND OLD_DATA.PART_REV_ID = NEW_DATA.PART_REV_ID
			AND SQRT (
				POWER ( (NEW_DATA.START_PX - OLD_DATA.START_PX), 2)
				+ POWER ( (NEW_DATA.START_PY - OLD_DATA.START_PY), 2)
				+ POWER ( (NEW_DATA.START_PZ - OLD_DATA.START_PZ), 2)
			) <![CDATA[<=]]> #{allowance, jdbcType=NUMERIC}
			AND 	SQRT (
				POWER ( (NEW_DATA.END_PX - OLD_DATA.END_PX), 2)
				+ POWER ( (NEW_DATA.END_PY - OLD_DATA.END_PY), 2)
				+ POWER ( (NEW_DATA.END_PZ - OLD_DATA.END_PZ), 2)
			) <![CDATA[<=]]> #{allowance, jdbcType=NUMERIC}
			AND ABS ( NEW_DATA.WELD_LENGTH - OLD_DATA.WELD_LENGTH
			)<![CDATA[<=]]> #{allowance, jdbcType=NUMERIC}
			AND UPPER(NEW_DATA.WELD_TYPE) = UPPER(OLD_DATA.WELD_TYPE)
			AND NEW_DATA.SECURE_TYPE = OLD_DATA.SECURE_TYPE
			AND NEW_DATA.SHEETS = OLD_DATA.SHEETS
	</select>
	
	<select id="makeEndDiffData" resultType="java.util.HashMap">
		INSERT INTO WELD_POINT_INBOUND (PART_ITEM_ID,
			OLD_REV_ID,
			OLD_ECO_ID,
			OLD_FEATURE_NAME,
			NEW_REV_ID,
			NEW_ECO_ID,
			NEW_FEATURE_NAME,
			WELD_TYPE,
			SECURE_TYPE,
			SHEETS,
			OLD_START_PX,
			OLD_START_PY,
			OLD_START_PZ,
			OLD_END_PX,
			OLD_END_PY,
			OLD_END_PZ,
			OLD_WELD_LENGTH,
			OLD_OCC_NAME,
			OLD_OCC_UID,
			OCC_THREAD_UID,
			NEW_START_PX,
			NEW_START_PY,
			NEW_START_PZ,
			NEW_END_PX,
			NEW_END_PY,
			NEW_END_PZ,
			NEW_WELD_LENGTH,
			START_DIFF,
			END_DIFF,
			OLD_REVERSE_FLAG,
			NEW_REVERSE_FLAG,
			CHANGE_MEMO,
			CREATE_DATE
		)
		SELECT DISTINCT
			OLD_DATA.PART_ITEM_ID AS PART_ITEM_ID,
			OLD_DATA.OLD_PART_REV_ID AS OLD_REV_ID,
			OLD_DATA.old_eco_id AS OLD_ECO_ID,
			OLD_DATA.FEATURE_NAME AS OLD_FEATURE_NAME,
			NEW_DATA.PART_REV_ID AS NEW_REV_ID,
			NEW_DATA.ECO_ID AS NEW_ECO_ID,
			NEW_DATA.FEATURE_NAME AS NEW_FEATURE_NAME,
			OLD_DATA.WELD_TYPE AS WELD_TYPE,
			OLD_DATA.SECURE_TYPE AS SECURE_TYPE,
			OLD_DATA.SHEETS AS SHEETS,
			OLD_DATA.START_PX AS OLD_START_PX,
			OLD_DATA.START_PY AS OLD_START_PY,
			OLD_DATA.START_PZ AS OLD_START_PZ,
			OLD_DATA.END_PX AS OLD_END_PX,
			OLD_DATA.END_PY AS OLD_END_PY,
			OLD_DATA.END_PZ AS OLD_END_PZ,
			OLD_DATA.WELD_LENGTH AS OLD_WELD_LENGTH,
			OLD_DATA.OCC_NAME AS OLD_OCC_NAME,
			OLD_DATA.OCC_UID AS OLD_OCC_UID,
			OLD_DATA.OCC_THREAD_UID AS OCC_THREAD_UID,
			NEW_DATA.START_PX AS NEW_START_PX,
			NEW_DATA.START_PY AS NEW_START_PY,
			NEW_DATA.START_PZ AS NEW_START_PZ,
			NEW_DATA.END_PX AS NEW_END_PX,
			NEW_DATA.END_PY AS NEW_END_PY,
			NEW_DATA.END_PZ AS NEW_END_PZ,
			NEW_DATA.WELD_LENGTH AS NEW_WELD_LENGTH,
			SQRT (
				POWER ( (NEW_DATA.START_PX - OLD_DATA.START_PX), 2)
				+ POWER ( (NEW_DATA.START_PY - OLD_DATA.START_PY), 2)
				+ POWER ( (NEW_DATA.START_PZ - OLD_DATA.START_PZ), 2))
			AS START_DIFF,
			SQRT (
				POWER ( (NEW_DATA.END_PX - OLD_DATA.END_PX), 2)
				+ POWER ( (NEW_DATA.END_PY - OLD_DATA.END_PY), 2)
				+ POWER ( (NEW_DATA.END_PZ - OLD_DATA.END_PZ), 2))
			AS END_DIFF,
			OLD_DATA.REVERSE_FLAG AS OLD_REVERSE_FLAG,
			NEW_DATA.REVERSE_FLAG AS NEW_REVERSE_FLAG,
			'END_DIFF' AS CHANGE_MEMO,
			SYSDATE AS CREATE_DATE
		FROM WELD_POINT_RAW2 NEW_DATA, WELD_POINT_BOM_R2 OLD_DATA,
			WELD_POINT_INBOUND INBOUNDS
		WHERE NEW_DATA.PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
			AND NEW_DATA.PART_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
			AND NEW_DATA.PART_ITEM_ID = OLD_DATA.PART_ITEM_ID
			AND NEW_DATA.PART_REV_ID = OLD_DATA.PART_REV_ID
			AND INBOUNDS.PART_ITEM_ID=NEW_DATA.PART_ITEM_ID
			AND INBOUNDS.NEW_REV_ID=NEW_DATA.PART_REV_ID
			AND SQRT (
					POWER ( (NEW_DATA.START_PX - OLD_DATA.START_PX), 2)
				  + POWER ( (NEW_DATA.START_PY - OLD_DATA.START_PY), 2)
				  + POWER ( (NEW_DATA.START_PZ - OLD_DATA.START_PZ), 2)
				  ) <![CDATA[<=]]> #{allowance, jdbcType=NUMERIC}
			AND SQRT (
					POWER ( (NEW_DATA.END_PX - OLD_DATA.END_PX), 2)
				  + POWER ( (NEW_DATA.END_PY - OLD_DATA.END_PY), 2)
				  + POWER ( (NEW_DATA.END_PZ - OLD_DATA.END_PZ), 2)
				  ) <![CDATA[>]]> #{allowance, jdbcType=NUMERIC}
			AND UPPER (NEW_DATA.WELD_TYPE) = UPPER (OLD_DATA.WELD_TYPE)
			AND NEW_DATA.SECURE_TYPE = OLD_DATA.SECURE_TYPE
			AND NEW_DATA.SHEETS = OLD_DATA.SHEETS
	</select>

	<select id="makeSaveDataForDelete" resultType="java.util.HashMap">
		INSERT INTO WELD_POINT_SAVED
		(
		   PART_ITEM_ID,
		   PART_REV_ID,
		   ECO_ID,
		   FEATURE_NAME,
		   WELD_TYPE,
		   SECURE_TYPE,
		   START_PX,
		   START_PY,
		   START_PZ,
		   END_PX,
		   END_PY,
		   END_PZ,
		   WELD_LENGTH,
		   SHEETS,
		   OCC_NAME,
		   OCC_UID,
		   THREAD_UID,
		   CREATE_DATE,
		   REVERSE_FLAG,
		   CHANGE_MEMO
		)
		SELECT
			PART_ITEM_ID AS PART_ITEM_ID,
			PART_REV_ID AS PART_REV_ID,
			OLD_ECO_ID AS ECO_ID,
			FEATURE_NAME AS FEATURE_NAME,
			WELD_TYPE AS WELD_TYPE,
			SECURE_TYPE AS SECURE_TYPE,
			START_PX AS START_PX,
			START_PY AS START_PY,
			START_PZ AS START_PZ,
			END_PX AS END_PX,
			END_PY AS END_PY,
			END_PZ AS END_PZ,
			WELD_LENGTH AS WELD_LENGTH,
			SHEETS AS SHEETS,
			OCC_NAME AS OCC_NAME,
			OCC_UID AS OCC_UID,
			OCC_THREAD_UID AS OCC_THREAD_UID,
			CREATE_DATE AS CREATE_DATE,
			REVERSE_FLAG AS REVERSE_FLAG,
			'DELETE' AS CHANGE_MEMO
		FROM (
			SELECT BOM_R2.PART_ITEM_ID,
				BOM_R2.PART_REV_ID,
				BOM_R2.OLD_ECO_ID,
				BOM_R2.FEATURE_NAME,
				BOM_R2.WELD_TYPE,
				BOM_R2.SECURE_TYPE,
				BOM_R2.START_PX,
				BOM_R2.START_PY,
				BOM_R2.START_PZ,
				BOM_R2.END_PX,
				BOM_R2.END_PY,
				BOM_R2.END_PZ,
				BOM_R2.WELD_LENGTH,
				BOM_R2.SHEETS,
				BOM_R2.OCC_NAME AS OCC_NAME,
				BOM_R2.OCC_UID AS OCC_UID,
				BOM_R2.OCC_THREAD_UID AS OCC_THREAD_UID,
				BOM_R2.CREATE_DATE,
				BOM_R2.REVERSE_FLAG
			FROM WELD_POINT_BOM_R2 BOM_R2
			WHERE BOM_R2.PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
				AND BOM_R2.PART_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
			MINUS	
			SELECT BOM_R2.PART_ITEM_ID,
				BOM_R2.PART_REV_ID,
				BOM_R2.OLD_ECO_ID,
				BOM_R2.FEATURE_NAME,
				BOM_R2.WELD_TYPE,
				BOM_R2.SECURE_TYPE,
				BOM_R2.START_PX,
				BOM_R2.START_PY,
				BOM_R2.START_PZ,
				BOM_R2.END_PX,
				BOM_R2.END_PY,
				BOM_R2.END_PZ,
				BOM_R2.WELD_LENGTH,
				BOM_R2.SHEETS,
				BOM_R2.OCC_NAME AS OCC_NAME,
				BOM_R2.OCC_UID AS OCC_UID,
				BOM_R2.OCC_THREAD_UID AS OCC_THREAD_UID,
				BOM_R2.CREATE_DATE,
				BOM_R2.REVERSE_FLAG
			FROM WELD_POINT_BOM_R2 BOM_R2,
				WELD_POINT_INBOUND INBOUNDS
			WHERE BOM_R2.PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
				AND BOM_R2.PART_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
				AND INBOUNDS.PART_ITEM_ID=BOM_R2.PART_ITEM_ID
				AND INBOUNDS.OLD_REV_ID=BOM_R2.OLD_PART_REV_ID
				AND INBOUNDS.OLD_START_PX=BOM_R2.START_PX
				AND INBOUNDS.OLD_START_PY=BOM_R2.START_PY
				AND INBOUNDS.OLD_START_PZ=BOM_R2.START_PZ
				AND INBOUNDS.OLD_END_PX=BOM_R2.END_PX
				AND INBOUNDS.OLD_END_PY=BOM_R2.END_PY
				AND INBOUNDS.OLD_END_PZ=BOM_R2.END_PZ
				AND UPPER(INBOUNDS.WELD_TYPE)=UPPER(BOM_R2.WELD_TYPE)
				AND INBOUNDS.SECURE_TYPE=BOM_R2.SECURE_TYPE
				AND INBOUNDS.SHEETS=BOM_R2.SHEETS
		)
	</select>

	<select id="makeSaveDataForInBound" resultType="java.util.HashMap">
		INSERT INTO WELD_POINT_SAVED (
			PART_ITEM_ID,
			PART_REV_ID,
			ECO_ID,
			FEATURE_NAME,
			WELD_TYPE,
			SECURE_TYPE,
			START_PX,
			START_PY,
			START_PZ,
			END_PX,
			END_PY,
			END_PZ,
			WELD_LENGTH,
			SHEETS,
			OCC_NAME,
			OCC_UID,
			THREAD_UID,
			CREATE_DATE,
			REVERSE_FLAG,
			CHANGE_MEMO
		)
		SELECT PART_ITEM_ID,
			NEW_REV_ID AS PART_REV_ID,
			OLD_ECO_ID AS ECO_ID,
			NEW_FEATURE_NAME AS FEATURE_NAME,
			WELD_TYPE AS WELD_TYPE,
			SECURE_TYPE AS SECURE_TYPE,
			OLD_START_PX AS START_PX,
			OLD_START_PY AS START_PY,
			OLD_START_PZ AS START_PZ,
			OLD_END_PX AS END_PX,
			OLD_END_PY AS END_PY,
			OLD_END_PZ AS END_PZ,
			OLD_WELD_LENGTH AS WELD_LENGTH,
			SHEETS AS SHEETS,
			OLD_OCC_NAME AS OCC_NAME,
			OLD_OCC_UID AS OCC_UID,
			OCC_THREAD_UID AS THREAD_UID,
			SYSDATE AS CREATE_DATE,
			OLD_REVERSE_FLAG AS REVERSE_FLAG,
			CHANGE_MEMO
		FROM WELD_POINT_INBOUND
		WHERE PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
			AND NEW_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
			AND CHANGE_MEMO = 'IN_BOUND'
	</select>
	
	<select id="makeSaveDataForEndDiff" resultType="java.util.HashMap">
		INSERT INTO WELD_POINT_SAVED (
			PART_ITEM_ID,
			PART_REV_ID,
			ECO_ID,
			FEATURE_NAME,
			WELD_TYPE,
			SECURE_TYPE,
			START_PX,
			START_PY,
			START_PZ,
			END_PX,
			END_PY,
			END_PZ,
			WELD_LENGTH,
			SHEETS,
			OCC_NAME,
			OCC_UID,
			THREAD_UID,
			CREATE_DATE,
			REVERSE_FLAG,
			CHANGE_MEMO
		)
		SELECT PART_ITEM_ID,
			NEW_REV_ID AS PART_REV_ID,
			NEW_ECO_ID AS ECO_ID,
			NEW_FEATURE_NAME AS FEATURE_NAME,
			WELD_TYPE AS WELD_TYPE,
			SECURE_TYPE AS SECURE_TYPE,
			NEW_START_PX AS START_PX,
			NEW_START_PY AS START_PY,
			NEW_START_PZ AS START_PZ,
			NEW_END_PX AS END_PX,
			NEW_END_PY AS END_PY,
			NEW_END_PZ AS END_PZ,
			NEW_WELD_LENGTH AS WELD_LENGTH,
			SHEETS AS SHEETS,
			OLD_OCC_NAME AS OCC_NAME,
			OLD_OCC_UID AS OCC_UID,
			OCC_THREAD_UID AS THREAD_UID,
			SYSDATE AS CREATE_DATE,
			NEW_REVERSE_FLAG AS REVERSE_FLAG,
			CHANGE_MEMO
		FROM WELD_POINT_INBOUND
		WHERE PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
			AND NEW_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
			AND CHANGE_MEMO = 'END_DIFF'
	</select>
	
	<select id="makeSaveDataForAdd" resultType="java.util.HashMap">
		INSERT INTO WELD_POINT_SAVED
		(
		   PART_ITEM_ID,
		   PART_REV_ID,
		   ECO_ID,
		   FEATURE_NAME,
		   WELD_TYPE,
		   SECURE_TYPE,
		   START_PX,
		   START_PY,
		   START_PZ,
		   END_PX,
		   END_PY,
		   END_PZ,
		   WELD_LENGTH,
		   SHEETS,
		   CREATE_DATE,
		   REVERSE_FLAG,
		   CHANGE_MEMO
		)
		SELECT
			PART_ITEM_ID AS PART_ITEM_ID,
			PART_REV_ID AS PART_REV_ID,
			ECO_ID AS ECO_ID,
			FEATURE_NAME AS FEATURE_NAME,
			WELD_TYPE AS WELD_TYPE,
			SECURE_TYPE AS SECURE_TYPE,
			START_PX AS START_PX,
			START_PY AS START_PY,
			START_PZ AS START_PZ,
			END_PX AS END_PX,
			END_PY AS END_PY,
			END_PZ AS END_PZ,
			WELD_LENGTH AS WELD_LENGTH,
			SHEETS AS SHEETS,
			CREATE_DATE AS CREATE_DATE,
			REVERSE_FLAG AS REVERSE_FLAG,
			'ADD' AS CHANGE_MEMO
		FROM (
			SELECT CSV_RAW2.PART_ITEM_ID,
				CSV_RAW2.PART_REV_ID,
				CSV_RAW2.ECO_ID,
				CSV_RAW2.FEATURE_NAME,
				CSV_RAW2.WELD_TYPE,
				CSV_RAW2.SECURE_TYPE,
				CSV_RAW2.START_PX,
				CSV_RAW2.START_PY,
				CSV_RAW2.START_PZ,
				CSV_RAW2.END_PX,
				CSV_RAW2.END_PY,
				CSV_RAW2.END_PZ,
				CSV_RAW2.WELD_LENGTH,
				CSV_RAW2.SHEETS,
				CSV_RAW2.CREATE_DATE,
				CSV_RAW2.REVERSE_FLAG
			FROM WELD_POINT_RAW2 CSV_RAW2
			WHERE CSV_RAW2.PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
				AND CSV_RAW2.PART_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
			MINUS
			SELECT CSV_RAW2.PART_ITEM_ID,
				CSV_RAW2.PART_REV_ID,
				CSV_RAW2.ECO_ID,
				CSV_RAW2.FEATURE_NAME,
				CSV_RAW2.WELD_TYPE,
				CSV_RAW2.SECURE_TYPE,
				CSV_RAW2.START_PX,
				CSV_RAW2.START_PY,
				CSV_RAW2.START_PZ,
				CSV_RAW2.END_PX,
				CSV_RAW2.END_PY,
				CSV_RAW2.END_PZ,
				CSV_RAW2.WELD_LENGTH,
				CSV_RAW2.SHEETS,
				CSV_RAW2.CREATE_DATE,
				CSV_RAW2.REVERSE_FLAG
			FROM WELD_POINT_RAW2 CSV_RAW2, WELD_POINT_INBOUND INBOUNDS
			WHERE CSV_RAW2.PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
				AND CSV_RAW2.PART_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
				AND INBOUNDS.PART_ITEM_ID=CSV_RAW2.PART_ITEM_ID
				AND INBOUNDS.NEW_REV_ID=CSV_RAW2.PART_REV_ID
				AND INBOUNDS.NEW_START_PX=CSV_RAW2.START_PX
				AND INBOUNDS.NEW_START_PY=CSV_RAW2.START_PY
				AND INBOUNDS.NEW_START_PZ=CSV_RAW2.START_PZ
				AND INBOUNDS.NEW_END_PX=CSV_RAW2.END_PX
				AND INBOUNDS.NEW_END_PY=CSV_RAW2.END_PY
				AND INBOUNDS.NEW_END_PZ=CSV_RAW2.END_PZ
				AND UPPER(INBOUNDS.WELD_TYPE)=UPPER(CSV_RAW2.WELD_TYPE)
				AND INBOUNDS.SECURE_TYPE=CSV_RAW2.SECURE_TYPE
				AND INBOUNDS.SHEETS=CSV_RAW2.SHEETS
		)
	</select>
	
	<delete id="deleteBOMWeldPointData" parameterType="java.util.HashMap">
		DELETE WELD_POINT_BOM_R
		WHERE PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
			AND PART_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
	</delete>
	
	<insert id="insertBOMWeldPointDataRow" parameterType="java.util.HashMap">
		INSERT INTO WELD_POINT_BOM_R
		(
			PART_ITEM_ID,
			PART_REV_ID,
			OLD_PART_REV_ID,
			OLD_ECO_ID,
			FEATURE_NAME,
			WELD_TYPE,
			SECURE_TYPE,
			START_PX,
			START_PY,
			START_PZ,
			END_PX,
			END_PY,
			END_PZ,
			WELD_LENGTH,
			SHEETS,
			OCC_NAME,
			OCC_UID,
			OCC_THREAD_UID,
			CREATE_DATE
		)
		VALUES (
			#{part_item_id, jdbcType=VARCHAR},
			#{part_rev_id, jdbcType=VARCHAR},
			#{old_part_rev_id, jdbcType=VARCHAR},
			#{old_eco_id, jdbcType=VARCHAR},
			#{feature_name, jdbcType=VARCHAR},
			#{weld_type, jdbcType=VARCHAR},
			#{secure_type, jdbcType=VARCHAR},
			#{start_point_x, jdbcType=NUMERIC},
			#{start_point_y, jdbcType=NUMERIC},
			#{start_point_z, jdbcType=NUMERIC},
			#{end_point_x, jdbcType=NUMERIC},
			#{end_point_y, jdbcType=NUMERIC},
			#{end_point_z, jdbcType=NUMERIC},
			#{weld_length, jdbcType=NUMERIC},
			#{sheets, jdbcType=NUMERIC},
			#{occurrence_name, jdbcType=VARCHAR},
			#{occurrence_uid, jdbcType=VARCHAR},
			#{occurrence_thread_uid, jdbcType=VARCHAR},
			sysdate
		)
	</insert>
	
	<delete id="deleteBOMWeldPoint2Data" parameterType="java.util.HashMap">
		DELETE WELD_POINT_BOM_R2
		WHERE PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
			AND PART_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
	</delete>
	
	<select id="makeBOMArrangedStartPointData" resultType="java.util.HashMap">
		INSERT INTO WELD_POINT_BOM_R2 (
			PART_ITEM_ID,
			PART_REV_ID,
			OLD_PART_REV_ID,
			OLD_ECO_ID,
			FEATURE_NAME,
			WELD_TYPE,
			SECURE_TYPE,
			START_PX,
			START_PY,
			START_PZ,
			END_PX,
			END_PY,
			END_PZ,
			WELD_LENGTH,
			SHEETS,
			OCC_NAME,
			OCC_UID,
			OCC_THREAD_UID,
			CREATE_DATE,
			REVERSE_FLAG
		)
		SELECT *
		FROM (
		WITH ABS_BASE_POINT AS (
				SELECT -9000.0 AS START_PX,
					-9000.0 AS START_PY,
					-9000.0 AS START_PZ,
					-9000.0 AS END_PX,
					-9000.0 AS END_PY,
					-9000.0 AS END_PZ
				FROM DUAL
			),
			WELD_POINT_BOM_R1ST AS (
				SELECT 
					WELD_POINT_BOM_R.*,
					SQRT (
						POWER ( ( WELD_POINT_BOM_R.START_PX - ABS_BASE_POINT.START_PX), 2)
						+ POWER ( ( WELD_POINT_BOM_R.START_PY - ABS_BASE_POINT.START_PY), 2)
						+ POWER ( ( WELD_POINT_BOM_R.START_PZ - ABS_BASE_POINT.START_PZ), 2)
					) AS START_DEFF,
					SQRT (
						POWER ( ( WELD_POINT_BOM_R.END_PX - ABS_BASE_POINT.END_PX), 2)
						+ POWER ( ( WELD_POINT_BOM_R.END_PY - ABS_BASE_POINT.END_PY), 2)
						+ POWER ( ( WELD_POINT_BOM_R.END_PZ - ABS_BASE_POINT.END_PZ), 2)
					)  AS END_DEFF
				FROM WELD_POINT_BOM_R, ABS_BASE_POINT
				WHERE WELD_POINT_BOM_R.PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
					AND WELD_POINT_BOM_R.PART_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
			),
			WELD_POINT_BOM_R2ND AS (
				SELECT
					WELD_POINT_BOM_R1ST.*,
					DECODE (
						SIGN (END_DEFF - START_DEFF),
						-1, 'REVERSE',
		                NULL
					) AS REVERSE_FLAG
				FROM WELD_POINT_BOM_R1ST
			)
			(
				SELECT WELD_POINT_BOM_R2ND.PART_ITEM_ID,
					WELD_POINT_BOM_R2ND.PART_REV_ID,
					WELD_POINT_BOM_R2ND.OLD_PART_REV_ID,
					WELD_POINT_BOM_R2ND.OLD_ECO_ID,
					WELD_POINT_BOM_R2ND.FEATURE_NAME,
					WELD_POINT_BOM_R2ND.WELD_TYPE,
					WELD_POINT_BOM_R2ND.SECURE_TYPE,
					WELD_POINT_BOM_R2ND.START_PX,
					WELD_POINT_BOM_R2ND.START_PY,
					WELD_POINT_BOM_R2ND.START_PZ,
					WELD_POINT_BOM_R2ND.END_PX,
					WELD_POINT_BOM_R2ND.END_PY,
					WELD_POINT_BOM_R2ND.END_PZ,
					WELD_POINT_BOM_R2ND.WELD_LENGTH,
					WELD_POINT_BOM_R2ND.SHEETS,
					WELD_POINT_BOM_R2ND.OCC_NAME,
					WELD_POINT_BOM_R2ND.OCC_UID,
					WELD_POINT_BOM_R2ND.OCC_THREAD_UID,
					WELD_POINT_BOM_R2ND.CREATE_DATE,
					NULL AS REVERSE_FLAG
				FROM WELD_POINT_BOM_R2ND
				WHERE TRIM (WELD_POINT_BOM_R2ND.WELD_TYPE) <![CDATA[<>]]> 'CO2'
				UNION
				SELECT WELD_POINT_BOM_R2ND.PART_ITEM_ID,
					WELD_POINT_BOM_R2ND.PART_REV_ID,
					WELD_POINT_BOM_R2ND.OLD_PART_REV_ID,
					WELD_POINT_BOM_R2ND.OLD_ECO_ID,
					WELD_POINT_BOM_R2ND.FEATURE_NAME,
					WELD_POINT_BOM_R2ND.WELD_TYPE,
					WELD_POINT_BOM_R2ND.SECURE_TYPE,
					WELD_POINT_BOM_R2ND.END_PX AS START_PX,
					WELD_POINT_BOM_R2ND.END_PY AS START_PY,
					WELD_POINT_BOM_R2ND.END_PZ AS START_PZ,
					WELD_POINT_BOM_R2ND.START_PX AS END_PX,
					WELD_POINT_BOM_R2ND.START_PY AS END_PY,
					WELD_POINT_BOM_R2ND.START_PZ AS END_PZ,
					WELD_POINT_BOM_R2ND.WELD_LENGTH,
					WELD_POINT_BOM_R2ND.SHEETS,
					WELD_POINT_BOM_R2ND.OCC_NAME,
					WELD_POINT_BOM_R2ND.OCC_UID,
					WELD_POINT_BOM_R2ND.OCC_THREAD_UID,
					WELD_POINT_BOM_R2ND.CREATE_DATE,
					WELD_POINT_BOM_R2ND.REVERSE_FLAG
				FROM WELD_POINT_BOM_R2ND
				WHERE TRIM (WELD_POINT_BOM_R2ND.WELD_TYPE) = 'CO2'
					AND WELD_POINT_BOM_R2ND.REVERSE_FLAG = 'REVERSE'
				UNION
				SELECT WELD_POINT_BOM_R2ND.PART_ITEM_ID,
					WELD_POINT_BOM_R2ND.PART_REV_ID,
					WELD_POINT_BOM_R2ND.OLD_PART_REV_ID,
					WELD_POINT_BOM_R2ND.OLD_ECO_ID,
					WELD_POINT_BOM_R2ND.FEATURE_NAME,
					WELD_POINT_BOM_R2ND.WELD_TYPE,
					WELD_POINT_BOM_R2ND.SECURE_TYPE,
					WELD_POINT_BOM_R2ND.END_PX AS START_PX,
					WELD_POINT_BOM_R2ND.END_PY AS START_PY,
					WELD_POINT_BOM_R2ND.END_PZ AS START_PZ,
					WELD_POINT_BOM_R2ND.START_PX AS END_PX,
					WELD_POINT_BOM_R2ND.START_PY AS END_PY,
					WELD_POINT_BOM_R2ND.START_PZ AS END_PZ,
					WELD_POINT_BOM_R2ND.WELD_LENGTH,
					WELD_POINT_BOM_R2ND.SHEETS,
					WELD_POINT_BOM_R2ND.OCC_NAME,
					WELD_POINT_BOM_R2ND.OCC_UID,
					WELD_POINT_BOM_R2ND.OCC_THREAD_UID,
					WELD_POINT_BOM_R2ND.CREATE_DATE,
					WELD_POINT_BOM_R2ND.REVERSE_FLAG
				FROM WELD_POINT_BOM_R2ND
				WHERE TRIM (WELD_POINT_BOM_R2ND.WELD_TYPE) = 'CO2'
					AND WELD_POINT_BOM_R2ND.REVERSE_FLAG IS NULL
			)
		)
	</select>
	
	<select id="findHaveSameEcoWeldGroupRevisionData" resultType="java.util.HashMap">
		WITH 
		WELDGROUP_REVISION AS (
			SELECT TRIM(REPLACE(ITM.PITEM_ID, '-WeldGroup', '')) AS PART_ID, 
				ITM.PITEM_ID AS WELDGROUP_ITEM_ID,
				ITMR.PITEM_REVISION_ID AS WELDGROUP_ITEM_REV_ID,
				ECOITM.PITEM_ID AS ECO_NO
			FROM INFODBA.PITEM ITM, 
			INFODBA.PITEMREVISION ITMR,
			INFODBA.PITEM ECOITM, 
			INFODBA.PITEMREVISION ECOITMR,
			INFODBA.PWORKSPACEOBJECT WO
			WHERE ITM.PITEM_ID LIKE '%-WeldGroup'
				AND ITMR.RITEMS_TAGU = ITM.PUID
				AND ITMR.RS7_ECO_NOU(+) = ECOITMR.PUID
				AND ECOITMR.RITEMS_TAGU = ECOITM.PUID
				and wo.puid=ITM.puid
				AND WO.POBJECT_TYPE='S7_Vehpart'
		)
		SELECT PART_ID,
			WELDGROUP_ITEM_ID,
			WELDGROUP_ITEM_REV_ID,
			ECO_NO
		FROM WELDGROUP_REVISION 
		WHERE PART_ID = #{part_item_id, jdbcType=VARCHAR}
			AND ECO_NO = #{eco_no, jdbcType=VARCHAR}
		ORDER BY WELDGROUP_ITEM_REV_ID DESC
	</select>
	
	<select id="getECOMatchedFMPRevision" resultType="java.util.HashMap">
		WITH 
			FMP_REVISION AS (
			SELECT ITM.PITEM_ID AS FMP_ITEM_ID,
				ITMR.PITEM_REVISION_ID AS FMP_ITEM_REV_ID,
				ECOITM.PITEM_ID AS ECO_NO
			FROM INFODBA.PITEM ITM, 
				INFODBA.PITEMREVISION ITMR,
				INFODBA.PITEM ECOITM, 
				INFODBA.PITEMREVISION ECOITMR,
				INFODBA.PWORKSPACEOBJECT WO
			WHERE ITMR.RITEMS_TAGU = ITM.PUID
				and WO.puid=ITM.PUID
				and WO.POBJECT_TYPE='S7_FunctionMast'
				AND ITMR.RS7_ECO_NOU(+) = ECOITMR.PUID
				AND ECOITMR.RITEMS_TAGU(+) = ECOITM.PUID
				and ECOITM.PITEM_ID = #{eco_no, jdbcType=VARCHAR}
		)
		, PRE_REV AS (
			SELECT FMP_ITEM_ID, 
				MAX(FMP_ITEM_REV_ID) AS MAX_PRE_REV
			FROM FMP_REVISION 
			WHERE FMP_ITEM_ID = #{fmp_item_id, jdbcType=VARCHAR}
			GROUP BY FMP_ITEM_ID
		)
		SELECT 
			FMP_REVISION.FMP_ITEM_ID AS FMP_ITEM_ID,
			FMP_REVISION.FMP_ITEM_REV_ID AS FMP_ITEM_REV_ID,
			FMP_REVISION.ECO_NO AS ECO_NO
		FROM FMP_REVISION, PRE_REV
			WHERE FMP_REVISION.FMP_ITEM_ID=PRE_REV.FMP_ITEM_ID
				AND FMP_REVISION.FMP_ITEM_REV_ID=PRE_REV.MAX_PRE_REV
	</select>
	
	<select id="getDeleteTargetBOMLineData" resultType="java.util.HashMap">
		SELECT WELD_POINT_SAVED.WELD_TYPE AS WELD_TYPE, 
			WELD_POINT_SAVED.SECURE_TYPE AS SECURE_TYPE, 
			WELD_POINT_SAVED.SHEETS AS SHEETS,
			WELD_POINT_SAVED.FEATURE_NAME AS FEATURE_NAME,
			WELD_POINT_SAVED.OCC_NAME AS OCC_NAME, 
			WELD_POINT_SAVED.THREAD_UID AS THREAD_UID
		FROM WELD_POINT_SAVED
		WHERE WELD_POINT_SAVED.PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
			AND WELD_POINT_SAVED.PART_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
			AND WELD_POINT_SAVED.CHANGE_MEMO='DELETE'
	</select>
	
	<select id="getAddTargetWeldPointData" resultType="java.util.HashMap">
		SELECT 
		   ECO_ID,
		   FEATURE_NAME,
		   WELD_TYPE,
		   SECURE_TYPE,
		   SHEETS,
		   START_PX,
		   START_PY,
		   START_PZ,
		   END_PX,
		   END_PY,
		   END_PZ,
		   WELD_LENGTH
		FROM WELD_POINT_SAVED
		WHERE PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
			AND PART_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
			AND CHANGE_MEMO='ADD'
	</select>
	
	<select id="getMaxOccSeqNo" resultType="java.util.HashMap">
		SELECT MAX(TO_NUMBER(SUBSTR(OCC_NAME, INSTR(OCC_NAME,'-',1,2)+1))) AS MAX_SEQ_NO
		FROM WELD_POINT_SAVED
		WHERE WELD_POINT_SAVED.PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
			AND WELD_POINT_SAVED.PART_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
			AND WELD_POINT_SAVED.CHANGE_MEMO <![CDATA[<>]]> 'DELETE'
			AND OCC_NAME IS NOT NULL
	</select>

	<select id="getAllNewBOMLineCount_OLD" resultType="java.util.HashMap">
		SELECT COUNT(*) AS ALL_BOMLINE_COUNT
		FROM WELD_POINT_SAVED
		WHERE PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
			AND PART_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
			AND CHANGE_MEMO <![CDATA[<>]]> 'DELETE'
	</select>
	
	<select id="getAllNewBOMLineCount" resultType="java.util.HashMap">
		SELECT  (
				ORIGN_COUNT_TAB.ORGIN_COUNT 
				- DELETE_COUNT_TAB.DELETE_COUNT
				+ ADD_COUNT_TAB.ADD_COUNT
			) AS ALL_BOMLINE_COUNT
		FROM (
			SELECT COUNT(*) AS ORGIN_COUNT 
			FROM WELD_POINT_BOM_R 
			WHERE PART_ITEM_ID=#{part_item_id, jdbcType=VARCHAR} 
				AND PART_REV_ID=#{part_rev_id, jdbcType=VARCHAR}
		) ORIGN_COUNT_TAB,
		(
			SELECT COUNT(*) AS DELETE_COUNT 
			FROM WELD_POINT_SAVED 
			WHERE PART_ITEM_ID=#{part_item_id, jdbcType=VARCHAR} 
				AND PART_REV_ID=#{part_rev_id, jdbcType=VARCHAR} 
				AND CHANGE_MEMO='DELETE'
		) DELETE_COUNT_TAB,
		(
			SELECT COUNT(*) AS ADD_COUNT 
			FROM WELD_POINT_SAVED 
			WHERE PART_ITEM_ID=#{part_item_id, jdbcType=VARCHAR} 
				AND PART_REV_ID=#{part_rev_id, jdbcType=VARCHAR} 
				AND CHANGE_MEMO='ADD'
		) ADD_COUNT_TAB
	</select>
	
	<select id="getUpdateTargetBOMLineData" resultType="java.util.HashMap">
		SELECT NEW_ECO_ID AS ECO_ID,
			NEW_FEATURE_NAME AS FEATURE_NAME,
			OLD_FEATURE_NAME AS OLD_FEATURE_NAME, 
			WELD_TYPE AS WELD_TYPE, 
			SECURE_TYPE AS SECURE_TYPE, 
			SHEETS AS SHEETS,
			NEW_START_PX AS START_PX, 
			NEW_START_PY AS START_PY, 
			NEW_START_PZ AS START_PZ,
			NEW_END_PX AS END_PX, 
			NEW_END_PY AS END_PY, 
			NEW_END_PZ AS END_PZ, 
			NEW_WELD_LENGTH AS WELD_LENGTH,
			OCC_THREAD_UID AS OCC_THREAD_UID, 
			CHANGE_MEMO AS CHANGE_MEMO
		FROM WELD_POINT_INBOUND 
		WHERE PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
			AND NEW_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
			AND UPPER(TRIM(OLD_FEATURE_NAME)) <![CDATA[<>]]> UPPER(TRIM(OLD_FEATURE_NAME))
			AND CHANGE_MEMO NOT IN ('DELETE', 'ADD')
		UNION	
		SELECT NEW_ECO_ID AS ECO_ID,
			NEW_FEATURE_NAME AS FEATURE_NAME,
			OLD_FEATURE_NAME AS OLD_FEATURE_NAME, 
			WELD_TYPE AS WELD_TYPE, 
			SECURE_TYPE AS SECURE_TYPE, 
			SHEETS AS SHEETS,
			NEW_START_PX AS START_PX, 
			NEW_START_PY AS START_PY, 
			NEW_START_PZ AS START_PZ,
			NEW_END_PX AS END_PX, 
			NEW_END_PY AS END_PY, 
			NEW_END_PZ AS END_PZ, 
			NEW_WELD_LENGTH AS WELD_LENGTH,
			OCC_THREAD_UID AS OCC_THREAD_UID, 
			CHANGE_MEMO AS CHANGE_MEMO
		FROM WELD_POINT_INBOUND 
		WHERE PART_ITEM_ID = #{part_item_id, jdbcType=VARCHAR}
			AND NEW_REV_ID = #{part_rev_id, jdbcType=VARCHAR}
			AND CHANGE_MEMO = 'END_DIFF'
	</select>
	
	<select id="getChildNodeWeldTypeList" resultType="java.util.HashMap">
		WITH BOM_VIEW AS (
			 SELECT 
				PPSBOMVIEWREVISION.PUID AS BOMVIEW_REV_PUID
				, PITEMREVISION.PUID AS ITEM_REV_PUID
				, PITEM.PUID AS ITEM_PUID
				, PITEM.PITEM_ID AS ITEM_ID
				, PITEMREVISION.PITEM_REVISION_ID AS ITEM_REV_ID
			FROM INFODBA.PPSBOMVIEWREVISION
				, INFODBA.PITEM
				, INFODBA.PITEMREVISION
				, INFODBA.PSTRUCTURE_REVISIONS
				, INFODBA.PPSBOMVIEW
				, INFODBA.PPSVIEWTYPE
			WHERE PITEMREVISION.RITEMS_TAGU=PITEM.PUID
				AND PPSBOMVIEW.PUID = PPSBOMVIEWREVISION.RBOM_VIEWU
				AND PPSBOMVIEWREVISION.PUID = PSTRUCTURE_REVISIONS.PVALU_0
				AND PSTRUCTURE_REVISIONS.PUID = PITEMREVISION.PUID
				AND PPSBOMVIEW.RVIEW_TYPEU = PPSVIEWTYPE.PUID
				AND PPSVIEWTYPE.PNAME IN ('view')
				AND PITEM.PITEM_ID = #{weld_op_id, jdbcType=VARCHAR}
				AND PITEMREVISION.PITEM_REVISION_ID = #{weld_op_rev_id, jdbcType=VARCHAR}
		), WELD_ITEMS AS (
			SELECT PITEM.PUID AS ITEM_PUID
				, PITEMREVISION.PUID AS ITEM_REV_PUID
				, PITEM.PITEM_ID AS ITEM_ID
				, substr(PITEM.PITEM_ID, ( INSTR(PITEM.PITEM_ID, '-', 1, 1)+1 ),
					INSTR(PITEM.PITEM_ID, '-', -1, 2) - INSTR(PITEM.PITEM_ID, '-', 1, 1) - 1
				  ) AS WELD_TYPE
			FROM INFODBA.PITEM, INFODBA.PWORKSPACEOBJECT, INFODBA.PITEMREVISION
			 WHERE PITEM.PUID=PWORKSPACEOBJECT.PUID
				AND PITEMREVISION.RITEMS_TAGU=PITEM.PUID
				AND PWORKSPACEOBJECT.POBJECT_TYPE='WeldPoint'
				AND PITEM.PITEM_ID LIKE 'WELDPOINT-%'
		)
		SELECT WELD_ITEMS.WELD_TYPE AS WELD_TYPE
			, COUNT(WELD_ITEMS.WELD_TYPE) AS WELD_TYPE_COUNT
		FROM INFODBA.PPSOCCURRENCE, BOM_VIEW, WELD_ITEMS
		WHERE PPSOCCURRENCE.RPARENT_BVRU=BOM_VIEW.BOMVIEW_REV_PUID
			AND (PPSOCCURRENCE.RCHILD_ITEMU=WELD_ITEMS.ITEM_PUID
				OR PPSOCCURRENCE.RCHILD_ITEMU=WELD_ITEMS.ITEM_REV_PUID
			)
		GROUP BY WELD_ITEMS.WELD_TYPE
	</select>
	
</mapper>