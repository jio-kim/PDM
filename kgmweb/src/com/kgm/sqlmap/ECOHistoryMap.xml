<?xml version="1.0" encoding="UTF-8"?>  
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">  
<!--  [20140417] Project code Old/New 분리 대응 -->
<!--  [SR140513-015][20140514] Project code Old/New 분리 대응 버그 픽스. -->
<mapper namespace="com.kgm.mapper.ECOHistoryMapper">  
	<select id="selectUserWorkingECO" resultType="String">  
		select ir.puid
		  from infodba.PS7_ECOREVISION ecoir
		     , infodba.PITEMREVISION ir
		     , infodba.PWORKSPACEOBJECT irw
		     , infodba.PPOM_APPLICATION_OBJECT ira
		     , infodba.PPOM_USER u
		     , infodba.PITEM i
		 where ecoir.puid = ir.puid
		   and ir.puid = irw.puid
		   and irw.pdate_released is null
		   and not exists (select 1 from infodba.pprocess_stage_list where puid = ir.puid)
		   and irw.pactive_seq = 1
		   and irw.puid = ira.puid
		   and ira.rowning_useru = u.puid
		   and u.puser_id = #{user_id, jdbcType=VARCHAR}
		   and ir.ritems_tagu = i.puid
	</select>
	
	<update id="extractEPL" statementType="CALLABLE">
	    {call ECO_EXTRACT_EPL(#{ecoNo, jdbcType=VARCHAR}, 'system', false)}
	</update>	
	
	<update id="generateECO" statementType="CALLABLE">
	    {call ECO_GENERATE(#{ecoNo, jdbcType=VARCHAR})}
	</update>	

	<select id="selectEPLData" resultType="String">
		select eco_no
		     , ct
		  from eco_bom_list
		 where parent_no = #{parent_no, jdbcType=VARCHAR}
		   and parent_rev = #{parent_rev, jdbcType=VARCHAR}
		   and occ_threads like <![CDATA['%']]> || #{occ_uid, jdbcType=VARCHAR} || <![CDATA['%']]>
	</select>

	<!-- ECO DWG List -->
	<resultMap id="selectECODwgListResult" type="com.kgm.rac.kernel.SYMCECODwgData">        
        <result property="ecoNo" column="ECO_NO"/>
        <result property="project" column="PROJECT"/>
        <result property="modelType" column="MODEL_TYPE"/>
        <result property="catProduct" column="V5_ASSM"/>
        <result property="partOrigin" column="PART_ORIGIN"/>
        <result property="partNo" column="PART_NO"/>
        <result property="revisionNo" column="PART_REV"/>
        <result property="revUid" column="REV_PUID"/>
        <result property="partName" column="PART_NAME"/>
        <result property="responsibility" column="RESPONSIBILITY"/>
        <result property="has3d" column="HAS_3D"/>
        <result property="has2d" column="HAS_2D"/>        
        <result property="zip" column="ZIP"/>
        <result property="sMode" column="SMODE"/>
        <result property="changeDesc" column="CHG_DESC"/>
    </resultMap>
    
    <!-- [SR140513-015][20140514] Project code Old/New 분리 대응 버그 픽스. -->
	<select id="selectECODwgList" resultMap="selectECODwgListResult" >  
        WITH EPL_DWG AS (
            SELECT DWG.ECO_NO
            ,		dwg.PROJECT
            ,		dwg.smode
                 , IR.PS7_PART_TYPE PART_ORIGIN
                 , DWG.PART_NO, DWG.PART_REV, IR.PUID REV_PUID
                 <!-- , DECODE(IRW.POBJECT_TYPE, 'S7_StdpartRevision', IRW.POBJECT_NAME || ' ' || IRW.POBJECT_DESC, IRW.POBJECT_NAME) PART_NAME -->
                 , IRW.POBJECT_NAME PART_NAME
                 , VPR.PS7_RESPONSIBILITY RESPONSIBILITY
                 , EXISTS_DATASET (IR.PUID, 'CATPart', IRW.PDATE_RELEASED) V5_PART
                 , EXISTS_DATASET (IR.PUID, 'CATProduct', IRW.PDATE_RELEASED) V5_ASSM
                 , EXISTS_DATASET (IR.PUID, 'CATDrawing', IRW.PDATE_RELEASED) V5_DWG
                 , CASE WHEN IRW.POBJECT_TYPE = 'S7_VehpartRevision' AND VPR.PS7_CAT_V4_TYPE IN ('B', 'M') THEN
                             EXISTS_DATASET (IR.PUID, 'catia', IRW.PDATE_RELEASED)
                        ELSE NULL
                   END AS V4_3D
                 , CASE WHEN IRW.POBJECT_TYPE = 'S7_VehpartRevision' AND VPR.PS7_CAT_V4_TYPE IN ('B', 'D') THEN
                             EXISTS_DATASET (IR.PUID, 'catia', IRW.PDATE_RELEASED)
                        ELSE NULL
                   END AS V4_2D
                 , CASE WHEN IRW.POBJECT_TYPE = 'S7_VehpartRevision' THEN VPR.PS7_DRW_SIZE
                        ELSE NULL
                   END AS DWG_SIZE
                 , EXISTS_DATASET (IR.PUID, 'Zip', IRW.PDATE_RELEASED) ZIP
                 , CHG_DESC
             FROM  ECO_DWG_LIST DWG
                 , INFODBA.PITEM I
                 , INFODBA.PITEMREVISION IR
                 , INFODBA.PWORKSPACEOBJECT IRW
                 , INFODBA.PS7_VEHPARTREVISION VPR
             WHERE DWG.ECO_NO = #{ecoNo, jdbcType=VARCHAR}
               AND DWG.PART_NO = I.PITEM_ID
               AND I.PUID = IR.RITEMS_TAGU
               AND IRW.PACTIVE_SEQ = 1
               AND IR.PITEM_REVISION_ID = DWG.PART_REV
               AND IR.PUID = IRW.PUID
               AND IR.PUID = VPR.PUID(+)
        ), DWG_TARGET AS (
            SELECT ECO_NO
            ,		PROJECT
            ,		smode
                 , PART_ORIGIN, PART_NO, PART_REV, REV_PUID, PART_NAME
                 , RESPONSIBILITY
                 , CASE WHEN V5_PART IS NOT NULL OR V5_ASSM IS NOT NULL OR V5_DWG IS NOT NULL THEN 'V5'
                        WHEN V4_3D IS NOT NULL OR V4_2D IS NOT NULL THEN 'V4'
                        ELSE NULL
                   END AS MODEL_TYPE
                 , DECODE (V5_PART, NULL, DECODE (V5_ASSM, NULL, DECODE(V4_3D, NULL, NULL, V4_3D), V5_ASSM), V5_PART) HAS_3D
                 , V5_ASSM
                 , DECODE (V5_DWG, NULL, DECODE (V4_2D, NULL, NULL, V4_2D), V5_DWG) HAS_2D
                 , DWG_SIZE
                 , ZIP
                 , CHG_DESC
            FROM EPL_DWG
        )
        SELECT  dwg.PROJECT
        ,		dwg.smode
             , DWG.MODEL_TYPE
             , DWG.ECO_NO
             , PART_ORIGIN, DWG.PART_NO, DWG.PART_REV, DWG.REV_PUID, DWG.PART_NAME
             , DWG.RESPONSIBILITY
             , DWG.V5_ASSM
             , DWG.HAS_2D || DECODE(DWG.DWG_SIZE, NULL, '', '.', '', '(' || DWG.DWG_SIZE || ')') HAS_2D
             , DWG.HAS_3D || DECODE(DWG.HAS_3D, NULL, NULL, '/' || EXISTS_JT(DWG.REV_PUID)) HAS_3D
             , DWG.ZIP
             , DWG.CHG_DESC
          FROM DWG_TARGET DWG
             , INFODBA.PITEMREVISION PIR
         WHERE (MODEL_TYPE IS NOT NULL OR ZIP IS NOT NULL)
           AND DWG.REV_PUID = PIR.PUID(+) 
         ORDER BY DWG.PART_NO
    </select>
    
    <!-- ECO-B : DWG Properties Update  -->     
    <update id="updateECODwgProperties" parameterType="com.kgm.rac.kernel.SYMCECODwgData">      
        UPDATE ECO_DWG_LIST SET
            CHG_DESC = #{changeDesc, jdbcType=VARCHAR}           
        WHERE
            ECO_NO = #{ecoNo, jdbcType=VARCHAR}
            AND PART_NO = #{partNo, jdbcType=VARCHAR}
            AND PART_REV = #{revisionNo, jdbcType=VARCHAR}             
    </update> 
    
    <!-- ECO EPL Requires Regenerate -->
    <!-- [20170104][ymjang] S201, SM01 Project 제외 -->
    <select id="isECOEPLChanged" resultType="String">
        WITH ECO AS (
            SELECT EI.PITEM_ID ECO_NO
                 , EIR.PUID ECO_UID
                 , DECODE(EIR.PS7_ECO_KIND, 'E', 'Y', 'N') IS_ENGIN
              FROM INFODBA.PITEM EI
                 , INFODBA.PITEMREVISION IR
                 , INFODBA.PS7_ECOREVISION EIR
                 , INFODBA.PWORKSPACEOBJECT EIRW
             WHERE EI.PITEM_ID = #{ecoNo, jdbcType=VARCHAR}
               AND EI.PUID = IR.RITEMS_TAGU
               AND IR.PUID = EIR.PUID
               AND EIR.PUID = EIRW.PUID
               AND EIRW.PACTIVE_SEQ = 1
        ), ECO_PART AS (
            SELECT E.ECO_NO, E.ECO_UID, E.IS_ENGIN
                 , I.PITEM_ID NPART_NO, IR.PITEM_REVISION_ID NPART_REV
                 , IR.PUID NPUID, IW.POBJECT_TYPE PART_TYPE
              FROM ECO E
                 , INFODBA.PITEMREVISION IR
                 , INFODBA.PWORKSPACEOBJECT IRW
                 , INFODBA.PITEM I
                 , INFODBA.PWORKSPACEOBJECT IW
             WHERE IR.RS7_ECO_NOU = E.ECO_UID
               AND IR.PUID = IRW.PUID
               AND IRW.PACTIVE_SEQ = 1
               AND IR.RITEMS_TAGU = I.PUID
               AND I.PUID = IW.PUID
               AND 'P' = CASE WHEN IW.POBJECT_TYPE = 'S7_FunctionMast' THEN 'P'
                              ELSE IR.PS7_STAGE
                         END
               AND IW.POBJECT_TYPE IN ('S7_Vehpart', 'S7_FunctionMast')
               AND IRW.PDATE_RELEASED IS NULL
        ), ECO_PART_COMPARE AS (
            SELECT EP.*
                 , BVRO.PLAST_MOD_DATE NBVR_DATE
                 , IRO.PLAST_MOD_DATE NPART_DATE
                 , BP.OPART_NO
                 , BP.OPART_REV
                 , BP.OPUID
              FROM ECO_PART EP
                 , INFODBA.PSTRUCTURE_REVISIONS SR
                 , INFODBA.PPOM_APPLICATION_OBJECT BVRO
                 , INFODBA.PPOM_APPLICATION_OBJECT IRO
                 , (SELECT EP.NPUID
                         , BI.PITEM_ID OPART_NO
                         , BIR.PITEM_REVISION_ID OPART_REV
                         , BIR.PUID OPUID
                         , BIR.PS7_STAGE STAGE
                      FROM ECO_PART EP
                         , INFODBA.PIMANRELATION R
                         , INFODBA.PIMANTYPE T
                         , INFODBA.PITEMREVISION BIR
                         , INFODBA.PWORKSPACEOBJECT BIRW
                         , INFODBA.PITEM BI
                     WHERE EP.NPUID = R.RPRIMARY_OBJECTU
                       AND R.RRELATION_TYPEU = T.PUID
                       AND T.PTYPE_NAME = 'IMAN_based_on'
                       AND R.RSECONDARY_OBJECTU = BIR.PUID
                       AND BIR.PUID = BIRW.PUID
                       AND BIRW.PDATE_RELEASED IS NOT NULL
                       AND 'P' = CASE WHEN EP.PART_TYPE = 'S7_FunctionMast' THEN 'P'
                                      ELSE BIR.PS7_STAGE
                                 END
                       AND BIR.RITEMS_TAGU = BI.PUID) BP
             WHERE EP.NPUID = BP.NPUID(+)
               AND EP.NPUID = SR.PUID(+)
               AND SR.PVALU_0 = BVRO.PUID(+)
               AND EP.NPUID = IRO.PUID
        ), EPL_PART_DELETE AS (
            SELECT DISTINCT E.*
                 , BL.NEW_PART_NO NPART_NO, BL.NEW_PART_REV NPART_REV, BL.NEW_PART_TYPE PART_TYPE
              FROM ECO E
                 , ECO_BOM_LIST BL
             WHERE E.ECO_NO = BL.ECO_NO
               AND BL.EPL_YN = 'Y'
               AND BL.CT <![CDATA[<>]]> 'D'
            UNION
              SELECT DISTINCT E.*
                 , BL.PARENT_NO NPART_NO, BL.PARENT_REV NPART_REV, BL.PARENT_TYPE PART_TYPE
              FROM ECO E
                 , ECO_BOM_LIST BL
             WHERE E.ECO_NO = BL.ECO_NO
        ), EPL_PART_TARGET AS (
            SELECT EP.ECO_UID, EP.IS_ENGIN
                 , EP.NPART_NO, EP.NPART_REV, EP.PART_TYPE
                 , CASE WHEN EP.NBVR_DATE IS NOT NULL THEN EP.NBVR_DATE
                        WHEN OPART_NO IS NULL THEN NULL
                        ELSE (SELECT PLAST_MOD_DATE
                                FROM INFODBA.PSTRUCTURE_REVISIONS SR
                                   , INFODBA.PPOM_APPLICATION_OBJECT BVRAO
                               WHERE EP.OPUID = SR.PUID
                                 AND SR.PVALU_0 = BVRAO.PUID)
                   END NBVR_DATE
                 , (SELECT EPL_DATE
                      FROM ECO_EPL_PART_DATE PD
                     WHERE EP.ECO_NO = PD.ECO_NO
                       AND EP.NPART_NO = PD.PART_NO
                       AND EP.NPART_REV = PD.PART_REV) EPL_BOM_DATE
                 , NPART_DATE
                 , (SELECT MIN(CRE_DATE)
                      FROM ECO_BOM_LIST BL
                     WHERE EP.ECO_NO = BL.ECO_NO
                       AND BL.EPL_YN = 'Y'
                       AND EP.NPART_NO = BL.NEW_PART_NO
                       AND EP.NPART_REV = BL.NEW_PART_REV) EPL_PART_DATE
                 , OPART_NO, OPART_REV
              FROM ECO_PART_COMPARE EP
            UNION ALL
            -- ECO 번호가 변경되거나 삭제된 Part
            SELECT DL.ECO_UID, DL.IS_ENGIN
                 , DL.NPART_NO, DL.NPART_REV, DL.PART_TYPE
                 , NULL NBVR_DATE
                 , (SELECT EPL_DATE
                      FROM ECO_EPL_PART_DATE ED
                     WHERE ED.ECO_NO = DL.ECO_NO
                       AND DL.NPART_NO = ED.PART_NO
                       AND DL.NPART_REV = ED.PART_REV) EPL_BOM_DATE
                 , NULL NPART_DATE
                 , NULL EPL_PART_DATE
                 , (SELECT PITEM_ID
                      FROM INFODBA.PITEM I
                         , INFODBA.PITEMREVISION IR
                         , INFODBA.PWORKSPACEOBJECT IRW
                     WHERE I.PITEM_ID = DL.NPART_NO
                       AND I.PUID = IR.RITEMS_TAGU
                       AND IR.PITEM_REVISION_ID = DL.NPART_REV
                       AND IR.PUID = IRW.PUID
                       AND IRW.PACTIVE_SEQ = 1) OPART_NO
                 , NULL OPART_REV
              FROM EPL_PART_DELETE DL
             WHERE NOT EXISTS (SELECT 1
                                 FROM INFODBA.PITEM I
                                    , INFODBA.PITEMREVISION IR
                                    , INFODBA.PWORKSPACEOBJECT IRW
                                WHERE I.PITEM_ID = DL.NPART_NO
                                  AND I.PUID = IR.RITEMS_TAGU
                                  AND IR.PITEM_REVISION_ID = DL.NPART_REV
                                  AND IR.PUID = IRW.PUID
                                  AND IRW.PACTIVE_SEQ = 1
                                  AND NVL(DL.ECO_UID, '@') = NVL(IR.RS7_ECO_NOU, '@'))
            )
            SELECT DECODE(count(*), 0, 'FALSE', 'TRUE')
              FROM EPL_PART_TARGET
             WHERE 1 = CASE WHEN NBVR_DATE IS NULL AND EPL_BOM_DATE IS NOT NULL THEN 1
                            WHEN NBVR_DATE IS NOT NULL AND EPL_BOM_DATE IS NULL AND 1 = ( CASE WHEN #{ecoNo, jdbcType=VARCHAR} LIKE 'CM%' THEN 
                                                                                                     IS_CONNECTED_FUNCTION(NPART_NO)
                                                                                               ELSE IS_CONNECTED_NONIF_FUNCTION(NPART_NO)
                                                                                          END ) THEN 1
                            --WHEN NBVR_DATE IS NOT NULL AND EPL_BOM_DATE IS NULL AND 1 = IS_CONNECTED_FUNCTION(NPART_NO) THEN 1
                            WHEN NBVR_DATE <![CDATA[<>]]> EPL_BOM_DATE THEN 1
                            WHEN NPART_DATE IS NOT NULL AND EPL_PART_DATE IS NULL AND 1 = ( CASE WHEN #{ecoNo, jdbcType=VARCHAR} LIKE 'CM%' THEN 
                                                                                                       IS_CONNECTED_FUNCTION(NPART_NO)
                                                                                                 ELSE IS_CONNECTED_NONIF_FUNCTION(NPART_NO)
                                                                                            END ) OR NPART_DATE <![CDATA[<>]]> EPL_PART_DATE THEN 1
                            --WHEN NPART_DATE IS NOT NULL AND EPL_PART_DATE IS NULL AND 1 = IS_CONNECTED_FUNCTION(NPART_NO) OR NPART_DATE <![CDATA[<>]]> EPL_PART_DATE THEN 1
                            WHEN NPART_DATE IS NULL AND OPART_NO IS NULL THEN 1
                            ELSE 0
                        END 
    </select>
    
    <!-- ECO EPL Requires Regenerate 2 -->
    <!-- [20180315][beenlaho] ECO에 작성된 부품이  Released 되지 않은 다른 ECO 에서 변경이 있었는지 체크 -->
    <select id="isECOEPLChangedByAnotherECO" resultType="String">
        WITH NOT_RELEASED_ECO AS (                     
             SELECT EI.PITEM_ID ECO_NO
                   , EIR.PUID ECO_UID
                   , DECODE(EIR.PS7_ECO_KIND, 'E', 'Y', 'N') IS_ENGIN
                FROM INFODBA.PITEM EI
                   , INFODBA.PITEMREVISION IR
                   , INFODBA.PS7_ECOREVISION EIR
                   , INFODBA.PWORKSPACEOBJECT EIRW
               WHERE 1=1 --EI.PITEM_ID = '35CH076'
                 AND EI.PUID = IR.RITEMS_TAGU
                 AND IR.PUID = EIR.PUID
                 AND EIR.PUID = EIRW.PUID
                 AND EIRW.PACTIVE_SEQ = 1
                 AND EIRW.Pdate_Released IS NULL
                 AND ei.pitem_id NOT IN ( #{ecoNo, jdbcType=VARCHAR} )
           ) 
           , SOURCE_ECO AS (      
              SELECT parent_no AS part_no, upd_date FROM eco_bom_list 
               WHERE eco_no = #{ecoNo, jdbcType=VARCHAR}
                 AND epl_yn = 'Y'
                 AND ct <![CDATA[<>]]> 'D'
              UNION   
              SELECT new_part_no AS part_no, upd_date FROM eco_bom_list 
               WHERE eco_no = #{ecoNo, jdbcType=VARCHAR}
                 AND epl_yn = 'Y'
                 AND ct <![CDATA[<>]]> 'D'
           )
           , TARGET_ECO AS (
              SELECT old_part_no, new_part_no, upd_date 
               FROM eco_bom_list epl 
               WHERE epl.eco_no IN ( SELECT eco_no FROM  NOT_RELEASED_ECO )
                 AND epl_yn = 'Y'
                 AND ct <![CDATA[<>]]> 'XX'
           )
           SELECT DECODE(count(*), 0, 'FALSE', 'TRUE')
             FROM SOURCE_ECO se, TARGET_ECO te
            WHERE se.part_no IN( te.new_part_no, te.old_part_no)
             AND te.upd_date <![CDATA[>]]> se.upd_date           
          <!-- 20240228 UPGRADE  , COMPARE_UPD_OLD AS (
           SELECT *
           FROM (
           SELECT NULL AS ECO_UID, NULL AS is_engin 
                  ,te.new_part_no AS npart_no, NULL npart_rev, NULL part_type
                  ,NULL nbvr_date, te.upd_date EPL_BOM_DATE
                  ,NULL NPART_DATE
                  ,NULL EPL_PART_DATE
                  ,te.old_part_no OPART_NO
                  , NULL OPART_REV 
             FROM SOURCE_ECO se, TARGET_ECO te
            WHERE se.part_no = te.new_part_no
             AND te.upd_date <![CDATA[>]]> se.upd_date
           UNION
           SELECT NULL AS ECO_UID, NULL AS is_engin 
                  ,te.new_part_no AS npart_no, NULL npart_rev, NULL part_type
                  ,NULL nbvr_date, te.upd_date EPL_BOM_DATE
                  ,NULL NPART_DATE
                  ,NULL EPL_PART_DATE
                  ,te.old_part_no OPART_NO
                  , NULL OPART_REV 
             FROM SOURCE_ECO se, TARGET_ECO te
            WHERE se.part_no = te.old_part_no
             AND te.upd_date <![CDATA[>]]> se.upd_date
            )  
            )  
            SELECT DECODE(count(*), 0, 'FALSE', 'TRUE')
             FROM COMPARE_UPD_OLD  -->  
    </select>
    
    <!-- ECO EPL(BOM) List -->
    <resultMap id="BIND_SYMCBOMEditData" type="com.kgm.rac.kernel.SYMCBOMEditData">         
        <result property="eplId" column="EPL_ID"/>
        <result property="ecoNo" column="ECO_NO"/>
        <result property="ecoNoOld" column="ECO_NO_OLD"/>
        <result property="occUid" column="OCC_THREADS"/>
        <result property="changeType" column="CT"/>
        <result property="parentNo" column="PARENT_NO"/>
        <result property="parentRev" column="PARENT_REV"/>
        <result property="parentType" column="PARENT_TYPE"/>
        <result property="projectOld" column="OLD_PROJECT"/>       
        <result property="projectNew" column="NEW_PROJECT"/>       
        <result property="partOriginOld" column="OLD_PART_ORIGIN"/>
        <result property="partNoOld" column="OLD_PART_NO"/>
        <result property="partRevOld" column="OLD_PART_REV"/>
        <result property="partOriginNew" column="NEW_PART_ORIGIN"/>
        <result property="partNoNew" column="NEW_PART_NO"/>
        <result property="partRevNew" column="NEW_PART_REV"/>
        <result property="partNameNew" column="NEW_PART_NAME"/>
        <result property="partNameOld" column="OLD_PART_NAME"/>                                
        <result property="partTypeNew" column="NEW_PART_TYPE"/>
        <result property="partTypeOld" column="OLD_PART_TYPE"/>                                
        <result property="seqOld" column="OLD_SEQ"/>
        <result property="seqNew" column="NEW_SEQ"/>
        <result property="qtyOld" column="OLD_QTY"/>
        <result property="qtyNew" column="NEW_QTY"/>
        <result property="supplyModeOld" column="OLD_SMODE"/>
        <result property="supplyModeNew" column="NEW_SMODE"/>
        <result property="altOld" column="OLD_APART"/>
        <result property="altNew" column="NEW_APART"/>
        <result property="moduleCodeOld" column="OLD_MCODE"/>
        <result property="moduleCodeNew"  column="NEW_MCODE"/>        
        <result property="vcOld" javaType="java.lang.String" jdbcType="CLOB" column="DECODE_OLD_VC"/>
        <!-- <result property="vcNew" javaType="java.lang.String" jdbcType="CLOB" column="DECODE_NEW_VC"/> -->        
        <result property="vcNew" javaType="java.lang.String" jdbcType="CLOB" column="DECODE_NEW_VC"/>
        <result property="selNew" column="NEW_SEL"/>
        <result property="selOld" column="OLD_SEL"/>
        <result property="catNew" column="NEW_CAT"/>
        <result property="catOld" column="OLD_CAT"/>
        <result property="colorIdNew" column="NEW_COLOR_I"/>
        <result property="colorIdOld" column="OLD_COLOR_I"/>
        <result property="colorSectionNew" column="NEW_COLOR_S"/>
        <result property="colorSectionOld" column="OLD_COLOR_S"/>
        <result property="shownOnNew" column="NEW_SHOWN_ON"/>
        <result property="shownOnOld" column="OLD_SHOWN_ON"/>
        <result property="icOld" column="OLD_IC"/>
        <result property="icNew" column="NEW_IC"/>
        <result property="pltStkOld" column="OLD_PLT_STK"/>
        <result property="asStkOld" column="OLD_AS_STK"/>       
        <result property="costNew" column="NEW_COST"/>
        <result property="toolNew" column="NEW_TOOL"/>
        <result property="chgDesc" column="CHG_DESC"/>
        <result property="userId" column="UPD_USER_ID"/>       
         <!-- <result property="" column="UPD_DATE"/> -->     
    </resultMap>
    
    <!--[20170201][ymjang] ECO EPL 조회 오류 개선  -->
    <select id="selectECOEplList" parameterType="java.lang.String" resultMap="BIND_SYMCBOMEditData">
		WITH ECO_BOM AS
		 (SELECT C.EPL_ID,
		         CASE
		           WHEN C.PARENT_TYPE = 'S7_Function' THEN
		            'ROOT'
		           WHEN EXISTS (SELECT 1
		                   FROM ECO_BOM_LIST BL
		                  WHERE BL.NEW_PART_NO = C.PARENT_NO
		                    AND BL.ECO_NO = C.ECO_NO
		                    AND BL.EPL_YN = 'Y') THEN
		            C.PARENT_NO
		           WHEN C.PARENT_TYPE = 'S7_FunctionMast' THEN
		            (SELECT DECODE(MIN(BL.PARENT_NO), NULL, 'ROOT', MIN(BL.PARENT_NO))
		               FROM ECO_BOM_LIST BL
		              WHERE BL.ECO_NO = C.ECO_NO
		                AND BL.PARENT_TYPE = 'S7_Function'
		                AND BL.EPL_YN = 'Y'
		                AND INSTR(C.PARENT_NO, BL.PARENT_NO, 1) <![CDATA[>]]> 0)
		           ELSE
		            'ROOT'
		         END PID,
		         C.NEW_PART_NO CID,
		         CASE
		           WHEN C.PARENT_TYPE = 'S7_Function' OR
		                C.PARENT_TYPE = 'S7_FunctionMast' THEN
		            '0'
		           WHEN NOT EXISTS (SELECT 1
		                   FROM ECO_BOM_LIST BL
		                  WHERE BL.NEW_PART_NO = C.PARENT_NO
		                    AND BL.ECO_NO = C.ECO_NO
		                    AND BL.EPL_YN = 'Y') THEN
		            '-1'
		           ELSE
		            DECODE(C.NEW_SEQ, NULL, TO_CHAR(C.OLD_SEQ), TO_CHAR(C.NEW_SEQ))
		         END ORDER_NO,
		         DECODE(C.NEW_SEQ, NULL, C.OLD_SEQ, C.NEW_SEQ) CHILD_SEQ,
		         CASE
		           WHEN C.PARENT_TYPE = 'S7_Function' THEN
		            '0'
		           WHEN NOT EXISTS (SELECT 1
		                   FROM ECO_BOM_LIST BL
		                  WHERE BL.NEW_PART_NO = C.PARENT_NO
		                    AND BL.ECO_NO = C.ECO_NO
		                    AND BL.EPL_YN = 'Y') THEN
		            '-1'
		           ELSE
		            (SELECT MIN(NEW_SEQ)
		               FROM ECO_BOM_LIST BL2
		              WHERE BL2.NEW_PART_NO = C.PARENT_NO
		                AND BL2.NEW_PART_REV = C.PARENT_REV
		                AND BL2.PARENT_NO =
		                    (SELECT MIN(T.PARENT_NO)
		                       FROM ECO_BOM_LIST T
		                      WHERE T.NEW_PART_NO = C.PARENT_NO
		                        AND T.NEW_PART_REV = C.PARENT_REV
		                        AND T.ECO_NO = C.ECO_NO
		                        AND T.EPL_YN = 'Y')
		                AND BL2.ECO_NO = C.ECO_NO
		                AND BL2.EPL_YN = 'Y')
		         END PARENT_SEQ
		    FROM ECO_BOM_LIST C
		   WHERE C.ECO_NO = #{ecoNo, jdbcType=VARCHAR}
		     AND C.EPL_YN = 'Y'),
		NEW_PART AS
		 (SELECT I.PITEM_ID ITEM_ID,
		         IR.PITEM_REVISION_ID ITEM_REV,
		         IR.PS7_PART_TYPE PART_ORIGIN,
		         IRW.POBJECT_NAME PART_NAME,
		         (SELECT IRV.PS7_SELECTIVE_PART
		            FROM INFODBA.PS7_VEHPARTREVISION IRV
		           WHERE IRV.PUID = IR.PUID) SEL,
		         (SELECT IRV.PS7_REGULATION
		            FROM INFODBA.PS7_VEHPARTREVISION IRV
		           WHERE IRV.PUID = IR.PUID) CAT,
		         (SELECT IRV.PS7_COLOR
		            FROM INFODBA.PS7_VEHPARTREVISION IRV
		           WHERE IRV.PUID = IR.PUID) COLOR_I,
		         (SELECT IRV.PS7_COLOR_ID
		            FROM INFODBA.PS7_VEHPARTREVISION IRV
		           WHERE IRV.PUID = IR.PUID) COLOR_S,
		         (SELECT CASE
		                   WHEN IRV.RS7_SHOWN_PART_NOU = 'AAAAAAAAAAAAAA' THEN
		                    ''
		                   ELSE
		                    (SELECT PITEM_ID
		                       FROM INFODBA.PITEM I
		                      WHERE IRV.RS7_SHOWN_PART_NOU = I.PUID)
		                 END
		            FROM INFODBA.PS7_VEHPARTREVISION IRV
		           WHERE IR.PUID = IRV.PUID) SON
		    FROM INFODBA.PITEM            I,
		         INFODBA.PITEMREVISION    IR,
		         INFODBA.PWORKSPACEOBJECT IW,
		         INFODBA.PWORKSPACEOBJECT IRW
		   WHERE IRW.POBJECT_TYPE IN ('S7_FunctionMastRevision',
		                              'S7_VehpartRevision',
		                              'S7_StdpartRevision')
		     AND IRW.PUID = IR.PUID
		     AND IW.POBJECT_TYPE IN ('S7_FunctionMast', 'S7_Vehpart', 'S7_Stdpart')
		     AND IW.PUID = I.PUID
		     AND IR.RITEMS_TAGU = I.PUID
		     AND IRW.PUID = IR.PUID
		     AND IW.PACTIVE_SEQ = 1
		     AND IRW.PACTIVE_SEQ = 1
		     AND (I.PITEM_ID, IR.PITEM_REVISION_ID) IN
		         (SELECT NEW_PART_NO, NEW_PART_REV
		            FROM ECO_BOM_LIST EBL
		           WHERE EBL.ECO_NO = #{ecoNo, jdbcType=VARCHAR}
		             AND EBL.EPL_YN = 'Y')),
		OLD_PART AS
		 (SELECT I.PITEM_ID ITEM_ID,
		         IR.PITEM_REVISION_ID ITEM_REV,
		         IR.PS7_PART_TYPE PART_ORIGIN,
		         IRW.POBJECT_NAME PART_NAME,
		         (SELECT IRV.PS7_SELECTIVE_PART
		            FROM INFODBA.PS7_VEHPARTREVISION IRV
		           WHERE IRV.PUID = IR.PUID) SEL,
		         (SELECT IRV.PS7_REGULATION
		            FROM INFODBA.PS7_VEHPARTREVISION IRV
		           WHERE IRV.PUID = IR.PUID) CAT,
		         (SELECT IRV.PS7_COLOR
		            FROM INFODBA.PS7_VEHPARTREVISION IRV
		           WHERE IRV.PUID = IR.PUID) COLOR_I,
		         (SELECT IRV.PS7_COLOR_ID
		            FROM INFODBA.PS7_VEHPARTREVISION IRV
		           WHERE IRV.PUID = IR.PUID) COLOR_S,
		         (SELECT CASE
		                   WHEN IRV.RS7_SHOWN_PART_NOU = 'AAAAAAAAAAAAAA' THEN
		                    ''
		                   ELSE
		                    (SELECT PITEM_ID
		                       FROM INFODBA.PITEM I
		                      WHERE IRV.RS7_SHOWN_PART_NOU = I.PUID)
		                 END
		            FROM INFODBA.PS7_VEHPARTREVISION IRV
		           WHERE IR.PUID = IRV.PUID) SON
		    FROM INFODBA.PITEM            I,
		         INFODBA.PITEMREVISION    IR,
		         INFODBA.PWORKSPACEOBJECT IW,
		         INFODBA.PWORKSPACEOBJECT IRW
		   WHERE IRW.POBJECT_TYPE IN ('S7_FunctionMastRevision',
		                              'S7_VehpartRevision',
		                              'S7_StdpartRevision')
		     AND IRW.PUID = IR.PUID
		     AND IW.POBJECT_TYPE IN ('S7_FunctionMast', 'S7_Vehpart', 'S7_Stdpart')
		     AND IW.PUID = I.PUID
		     AND IR.RITEMS_TAGU = I.PUID
		     AND IRW.PUID = IR.PUID
		     AND IW.PACTIVE_SEQ = 1
		     AND IRW.PACTIVE_SEQ = 1
		     AND (I.PITEM_ID, IR.PITEM_REVISION_ID) IN
		         (SELECT OLD_PART_NO, OLD_PART_REV
		            FROM ECO_BOM_LIST EBL
		           WHERE EBL.ECO_NO = #{ecoNo, jdbcType=VARCHAR}
		             AND EBL.EPL_YN = 'Y'))
		SELECT EB.ORDER_NO,
		       BL.*,
		       NEW_PART.PART_ORIGIN NEW_PART_ORIGIN,
		       OLD_PART.PART_ORIGIN OLD_PART_ORIGIN,
		       NEW_PART.PART_NAME NEW_PART_NAME,
		       OLD_PART.PART_NAME OLD_PART_NAME,
		       TO_CLOB(REPLACE(PKG_COMMON.CONVERT_TO_SIMPLE(BL.OLD_VC), ' or ', '@')) DECODE_OLD_VC,
		       TO_CLOB(REPLACE(PKG_COMMON.CONVERT_TO_SIMPLE(BL.NEW_VC), ' or ', '@')) DECODE_NEW_VC,
		       NEW_PART.SEL NEW_SEL,
		       OLD_PART.SEL OLD_SEL,
		       NEW_PART.CAT NEW_CAT,
		       OLD_PART.CAT OLD_CAT,
		       NEW_PART.COLOR_I NEW_COLOR_I,
		       OLD_PART.COLOR_I OLD_COLOR_I,
		       NEW_PART.COLOR_S NEW_COLOR_S,
		       OLD_PART.COLOR_S OLD_COLOR_S,
		       NEW_PART.SON NEW_SHOWN_ON,
		       OLD_PART.SON OLD_SHOWN_ON
		  FROM ECO_BOM EB, ECO_BOM_LIST BL, NEW_PART, OLD_PART
		 WHERE BL.ECO_NO = #{ecoNo, jdbcType=VARCHAR}
		   AND BL.EPL_YN = 'Y'
		   AND BL.EPL_ID = EB.EPL_ID
		   AND BL.NEW_PART_NO = NEW_PART.ITEM_ID(+)
		   AND BL.NEW_PART_REV = NEW_PART.ITEM_REV(+)
		   AND BL.OLD_PART_NO = OLD_PART.ITEM_ID(+)
		   AND BL.OLD_PART_REV = OLD_PART.ITEM_REV(+)
		 START WITH EB.PID = 'ROOT'
		CONNECT BY PRIOR EB.CID = EB.PID
		       AND PRIOR EB.CHILD_SEQ = EB.PARENT_SEQ
		 ORDER SIBLINGS BY EB.ORDER_NO, DECODE(BL.PARENT_TYPE, 'S7_FunctionMast', 'F' || SUBSTR(BL.PARENT_NO, 2), BL.PARENT_NO), DECODE(BL.NEW_SEQ, NULL, TO_CHAR(BL.OLD_SEQ), TO_CHAR(BL.NEW_SEQ))
    </select>
    
    <select id="selectInECOlList" parameterType="java.lang.String" resultType="java.util.HashMap">
        select ir.puid ppuid, ebl.parent_no parent_no, ebl.parent_rev parent_rev, ebl.new_part_no new_part_no, ebl.occ_threads occ_threads
        from eco_bom_list ebl
           , infodba.pitem i
           , infodba.pitemrevision ir
        where ebl.eco_no = #{ecoNo, jdbcType=VARCHAR}
        and ebl.epl_yn = 'Y'
        and ebl.new_part_no is not null
        and i.puid = ir.ritems_tagu
        and i.pitem_id = ebl.parent_no
        and ir.pitem_revision_id = ebl.parent_rev
    </select>
    
    <!-- ECO-C : EPL Properties Update  -->
    <update id="updateECOEPLProperties" parameterType="com.kgm.rac.kernel.SYMCBOMEditData">      
        UPDATE ECO_BOM_LIST SET
            NEW_IC = #{icNew, jdbcType=VARCHAR}
            ,OLD_IC = #{icOld, jdbcType=VARCHAR}
            ,OLD_PLT_STK = #{pltStkOld, jdbcType=VARCHAR}
            ,OLD_AS_STK = #{asStkOld, jdbcType=VARCHAR}
            ,NEW_COST = #{costNew, jdbcType=VARCHAR}
            ,NEW_TOOL = #{toolNew, jdbcType=VARCHAR}
            ,CHG_DESC = #{chgDesc, jdbcType=VARCHAR}
        WHERE
            EPL_ID = #{eplId, jdbcType=VARCHAR}
    </update>
    
    <!-- ECO PartList List -->
    <resultMap id="BIND_SYMCPartListData" type="com.kgm.rac.kernel.SYMCPartListData">         
        <result property="partId" column="PART_ID"/>
        <result property="ecoNo" column="ECO_NO"/>
        <result property="project" column="PROJECT"/>
        <result property="parentNo" column="PARENT_NO"/>
        <result property="parentRev" column="PARENT_REV"/>
        <result property="changeType" column="CT"/>
        <result property="partOrigin" column="PART_ORIGIN"/>
        <result property="partNo" column="PART_NO"/>
        <result property="partRev" column="PART_REV"/>
        <result property="partName" column="PART_NAME"/>        
        <result property="seq" column="SEQ"/>
        <result property="qty" column="QTY"/>
        <result property="supplyMode" column="SMODE"/>
        <result property="alt" column="APART"/>
        <result property="moduleCode" column="MCODE"/>                
        <result property="sel" column="SEL"/>
        <result property="cat" column="CAT"/>
        <result property="colorId" column="COLOR_I"/>
        <result property="colorSection" column="COLOR_S"/>
        <result property="shownOn" column="SON"/>
        <result property="pltStk" column="PLT_STK"/>
        <result property="asStk" column="AS_STK"/>       
        <result property="cost" column="COST"/>
        <result property="tool" column="TOOL"/>
        <result property="desc" column="CHG_DESC"/>
    </resultMap>
    
    <select id="selectECOPartList" parameterType="java.lang.String" resultMap="BIND_SYMCPartListData">    
        SELECT E_PART_LIST.*
             , IR.PS7_PART_TYPE PART_ORIGIN
             <!-- , DECODE(IRW.POBJECT_TYPE, 'S7_StdpartRevision', IRW.POBJECT_NAME || ' ' || IRW.POBJECT_DESC, IRW.POBJECT_NAME) PART_NAME -->
             , IRW.POBJECT_NAME PART_NAME
             , IRV.PS7_SELECTIVE_PART SEL
             , IRV.PS7_REGULATION CAT
             , IRV.PS7_COLOR COLOR_I
             , IRV.PS7_COLOR_ID COLOR_S
             , CASE WHEN IRV.RS7_SHOWN_PART_NOU = 'AAAAAAAAAAAAAA' THEN ''
                    ELSE (SELECT PITEM_ID
                            FROM INFODBA.PITEM I
                           WHERE IRV.RS7_SHOWN_PART_NOU = I.PUID)
               END SON
          FROM ECO_PART_LIST E_PART_LIST
             , INFODBA.PITEM I
             , INFODBA.PITEMREVISION IR
             , INFODBA.PWORKSPACEOBJECT IRW
             , INFODBA.PS7_VEHPARTREVISION IRV
         WHERE E_PART_LIST.ECO_NO = #{ecoNo, jdbcType=VARCHAR}
           AND E_PART_LIST.PART_NO = I.PITEM_ID
           AND I.PUID = IR.RITEMS_TAGU
           AND IR.PITEM_REVISION_ID = E_PART_LIST.PART_REV
           AND IR.PUID = IRW.PUID
           AND IRW.PACTIVE_SEQ = 1
           AND IRW.PUID = IRV.PUID(+)
         ORDER BY E_PART_LIST.PARENT_NO, E_PART_LIST.PARENT_REV
    </select> 
    
    <!-- ECO-D : ECO PartList Properties Update  -->
    <!-- [20170116][ymajang] ECO D 지 저장 오류 수정 -->
    <update id="updateECOPartListProperties" parameterType="com.kgm.rac.kernel.SYMCPartListData">      
       UPDATE ECO_PART_LIST SET            
              PLT_STK = #{pltStk, jdbcType=VARCHAR}
            , AS_STK = #{asStk, jdbcType=VARCHAR}
            , COST = #{cost, jdbcType=VARCHAR}
            , TOOL = #{tool, jdbcType=VARCHAR}
            , CHG_DESC = #{desc, jdbcType=VARCHAR}
        WHERE PART_NO = #{partNo, jdbcType=VARCHAR}
    </update>
    
    <select id="selectECOBOMList" parameterType="java.util.HashMap" resultMap="BIND_SYMCBOMEditData">
        SELECT BL.OCC_THREADS, DECODE(BL.CT, 'XX', '', BL.CT) CT
             , BL.NEW_PART_NO, BL.NEW_PART_REV, BL.NEW_PART_TYPE
             , BL.OLD_PART_NO, BL.OLD_PART_REV, BL.OLD_PART_TYPE
             , BL.NEW_SEQ, BL.NEW_QTY, BL.NEW_SMODE, BL.NEW_APART, BL.NEW_MCODE
             , BL.OLD_SEQ, BL.OLD_QTY, BL.OLD_SMODE, BL.OLD_APART, BL.OLD_MCODE
             , NP.PART_ORIGIN NEW_PART_ORIGIN, NP.PART_NAME NEW_PART_NAME
             , OP.PART_ORIGIN OLD_PART_ORIGIN, OP.PART_NAME OLD_PART_NAME
             , NP.SEL NEW_SEL, NP.CAT NEW_CAT, NP.COLOR_I NEW_COLOR_I, NP.COLOR_S NEW_COLOR_S
             , OP.SEL OLD_SEL, OP.CAT OLD_CAT, OP.COLOR_I OLD_COLOR_I, OP.COLOR_S OLD_COLOR_S
             , NP.SON NEW_SHOWN_ON, OP.SON OLD_SHOWN_ON
             , GET_EPL_ECO_NO(BL.ECO_NO, BL.CT, BL.NEW_PART_NO, BL.NEW_PART_REV, BL.PARENT_NO, BL.PARENT_REV, BL.NEW_SEQ, BL.NEW_SMODE, BL.NEW_APART, BL.NEW_MCODE, BL.NEW_VC) ECO_NO
             , GET_EPL_ECO_NO(BL.ECO_NO, DECODE(BL.CT, 'D', 'D', 'XX'), BL.OLD_PART_NO, BL.OLD_PART_REV, BL.PARENT_NO, BL.PARENT_REV, BL.OLD_SEQ, BL.OLD_SMODE, BL.OLD_APART, BL.OLD_MCODE, BL.OLD_VC) ECO_NO_OLD
             , DECODE_OPTION_CONDITION(BL.OLD_VC) DECODE_OLD_VC, DECODE_OPTION_CONDITION(BL.NEW_VC) DECODE_NEW_VC
          FROM ECO_BOM_LIST BL
            , (SELECT I.PITEM_ID ITEM_ID
                    , IR.PITEM_REVISION_ID ITEM_REV
                    , IR.PS7_PART_TYPE PART_ORIGIN
                    , IRW.POBJECT_NAME PART_NAME
                    , IRV.PS7_SELECTIVE_PART SEL
                    , IRV.PS7_REGULATION CAT
                    , IRV.PS7_COLOR COLOR_I
                    , IRV.PS7_COLOR_ID COLOR_S
                    , CASE WHEN IRV.RS7_SHOWN_PART_NOU = 'AAAAAAAAAAAAAA' THEN ''
                           ELSE (SELECT PITEM_ID
                                   FROM INFODBA.PITEM I
                                  WHERE IRV.RS7_SHOWN_PART_NOU = I.PUID)
                      END SON
                 FROM INFODBA.PITEM I
                    , INFODBA.PITEMREVISION IR
                    , INFODBA.PS7_VEHPARTREVISION IRV
                    , INFODBA.PWORKSPACEOBJECT IRW
                WHERE IRW.POBJECT_TYPE IN ('S7_FunctionMastRevision', 'S7_VehpartRevision', 'S7_StdpartRevision')
                  AND IRW.PUID = IRV.PUID(+)
                  AND IRW.PUID = IR.PUID
                  AND IR.RITEMS_TAGU = I.PUID
                  AND IRW.PUID = IR.PUID
                  AND IRW.PACTIVE_SEQ = 1) NP
            , (SELECT I.PITEM_ID ITEM_ID
                    , IR.PITEM_REVISION_ID ITEM_REV
                    , IR.PS7_PART_TYPE PART_ORIGIN
                    , DECODE(IRW.POBJECT_TYPE, 'S7_StdpartRevision', IRW.POBJECT_NAME || ' ' || IRW.POBJECT_DESC, IRW.POBJECT_NAME) PART_NAME
                    , IRV.PS7_SELECTIVE_PART SEL
                    , IRV.PS7_REGULATION CAT
                    , IRV.PS7_COLOR COLOR_I
                    , IRV.PS7_COLOR_ID COLOR_S
                    , CASE WHEN IRV.RS7_SHOWN_PART_NOU = 'AAAAAAAAAAAAAA' THEN ''
                           ELSE (SELECT PITEM_ID
                                   FROM INFODBA.PITEM I
                                  WHERE IRV.RS7_SHOWN_PART_NOU = I.PUID)
                      END SON
                 FROM INFODBA.PITEM I
                    , INFODBA.PITEMREVISION IR
                    , INFODBA.PS7_VEHPARTREVISION IRV
                    , INFODBA.PWORKSPACEOBJECT IRW
                WHERE IRW.POBJECT_TYPE IN ('S7_FunctionMastRevision', 'S7_VehpartRevision', 'S7_StdpartRevision')
                  AND IRW.PUID = IRV.PUID(+)
                  AND IRW.PUID = IR.PUID
                  AND IR.RITEMS_TAGU = I.PUID
                  AND IRW.PUID = IR.PUID
                  AND IRW.PACTIVE_SEQ = 1) OP
         WHERE ECO_NO = #{ecoNo, jdbcType=VARCHAR}
           AND PARENT_NO = #{parentNo, jdbcType=VARCHAR}
           AND PARENT_REV = #{parentRev, jdbcType=VARCHAR}
           AND NEW_PART_NO = NP.ITEM_ID(+)
           AND NEW_PART_REV = NP.ITEM_REV(+)
           AND OLD_PART_NO = OP.ITEM_ID(+)
           AND OLD_PART_REV = OP.ITEM_REV(+)
         ORDER BY DECODE(NEW_SEQ, NULL, OLD_SEQ, NEW_SEQ)
    </select>
    
    <!-- ECO Demon process -->
    <select id="selectECODemonTarget" resultType="java.util.HashMap">
        WITH ECO_PART AS (
            SELECT ECOI.PITEM_ID ECO_NO
                 , ECOIRW.PDATE_RELEASED ECO_DATE
                 , PPART.PART_NO
                 , PPART.PART_REV
                 , PIR.PUID REV_PUID
                 , PSR.PVALU_0 PART_BVR
              FROM INFODBA.PITEMREVISION ECOIR
                 , INFODBA.PWORKSPACEOBJECT ECOIRW
                 , INFODBA.PITEM ECOI
                 , ECO_EPL_PART_DATE PPART
                 , INFODBA.PITEM PI
                 , INFODBA.PITEMREVISION PIR
                 , INFODBA.PWORKSPACEOBJECT PIRW
                 , INFODBA.PSTRUCTURE_REVISIONS PSR
             WHERE ECOIR.PUID = ECOIRW.PUID
               AND ECOIRW.POBJECT_TYPE = 'S7_ECORevision'
               AND ECOIRW.PDATE_RELEASED &gt; SYSDATE - 5
               AND ECOIR.RITEMS_TAGU = ECOI.PUID
               AND ECOI.PITEM_ID = PPART.ECO_NO
               AND PPART.BI_YN = 'N'
               AND PPART.PART_NO = PI.PITEM_ID
               AND PI.PUID = PIR.RITEMS_TAGU
               AND PIR.PITEM_REVISION_ID = PPART.PART_REV
               AND PIR.PUID = PIRW.PUID
               AND PIRW.PACTIVE_SEQ = 1
               AND PIR.PUID = PSR.PUID
         )
         SELECT E.ECO_NO
              , E.PART_NO
              , E.PART_REV
              , E.PART_BVR
              , B.BASE_NO
              , B.BASE_REV
           FROM ECO_PART E
              , (SELECT E.REV_PUID
                      , BI.PITEM_ID BASE_NO
                      , BIR.PITEM_REVISION_ID BASE_REV
                   FROM ECO_PART E
                      , INFODBA.PIMANRELATION REL
                      , INFODBA.PIMANTYPE RT
                      , INFODBA.PITEMREVISION BIR
                      , INFODBA.PITEM BI
                      , INFODBA.PWORKSPACEOBJECT BIW
                  WHERE E.REV_PUID = REL.RPRIMARY_OBJECTU
                    AND REL.RRELATION_TYPEU = RT.PUID
                    AND RT.PTYPE_NAME = 'IMAN_based_on'
                    AND REL.RSECONDARY_OBJECTU = BIR.PUID
                    AND BIR.RITEMS_TAGU = BI.PUID
                    AND BI.PUID = BIW.PUID
                    AND BIW.PACTIVE_SEQ = 1) B
         WHERE E.REV_PUID = B.REV_PUID(+)
         ORDER BY ECO_DATE
    </select>
	<select id="selectOccurrenceECO" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT OCC.ROCC_THREADU
		     , NBL.CT
		     , CASE WHEN SUBSTR(NBL.CT, 1, 1) = 'N' OR SUBSTR(NBL.CT, 1, 1) = 'F' THEN NBL.ECO_NO
		            ELSE (SELECT MIN(ECO_NO)
        		            FROM ECO_BOM_LIST OBL
                		   WHERE OBL.PARENT_NO = #{baseNo, jdbcType=VARCHAR}
		                     AND OBL.PARENT_REV = #{baseRev, jdbcType=VARCHAR}
        		             AND OBL.NEW_PART_NO = DECODE(NBL.OLD_PART_NO, NULL, NBL.NEW_PART_NO, NBL.OLD_PART_NO)
		                     AND OBL.NEW_PART_REV = DECODE(NBL.OLD_PART_NO, NULL, NBL.NEW_PART_REV, NBL.OLD_PART_REV)
        		             AND DBMS_LOB.COMPARE (NVL(OBL.NEW_VC, '@'), NVL(DECODE(NBL.OLD_PART_NO, NULL, NBL.NEW_VC, NBL.OLD_VC), '@')) = 0
                		     AND NVL(OBL.NEW_SEQ, '@') = NVL(DECODE(NBL.OLD_PART_NO, NULL, NBL.NEW_SEQ, NBL.OLD_SEQ), '@')
		                     AND NVL(OBL.NEW_SMODE, '@') = NVL(DECODE(NBL.OLD_PART_NO, NULL, NBL.NEW_SMODE, NBL.OLD_SMODE), '@')
		                     AND NVL(OBL.NEW_APART, '@') = NVL(DECODE(NBL.OLD_PART_NO, NULL, NBL.NEW_APART, NBL.OLD_APART), '@')
        		         )
       		END ECO_NO
		  FROM INFODBA.PPSOCCURRENCE OCC
		     , ECO_BOM_LIST NBL
		 WHERE OCC.RPARENT_BVRU = #{parentBVR, jdbcType=VARCHAR}
		   AND NBL.ECO_NO = #{ecoNo, jdbcType=VARCHAR}
		   AND NBL.PARENT_NO = #{parentNo, jdbcType=VARCHAR}
		   AND NBL.PARENT_REV = #{parentRev, jdbcType=VARCHAR}
		   AND INSTR(NBL.OCC_THREADS, OCC.ROCC_THREADU, 1) > 0
	</select>
	
	<update id="updateOccurrenceECOApplied" parameterType="java.util.HashMap">      
        UPDATE ECO_EPL_PART_DATE
           SET BI_YN = 'Y'
         WHERE ECO_NO = #{ecoNo, jdbcType=VARCHAR}
           AND BI_YN = 'N'
           AND PART_NO = #{parentNo, jdbcType=VARCHAR}
           AND PART_REV = #{parentRev, jdbcType=VARCHAR}
    </update> 
	
	<select id="selectReleasedECO" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT I.PITEM_ID ECO_ID
             , ECOIR.PUID ECO_UID
          FROM INFODBA.PS7_ECOREVISION ECOIR
             , INFODBA.PITEMREVISION IR
             , INFODBA.PWORKSPACEOBJECT IRW
             , INFODBA.PITEM I
         WHERE ECOIR.PUID = IR.PUID
           AND IR.PUID = IRW.PUID
           AND IRW.PDATE_RELEASED IS NOT NULL
           AND IR.RITEMS_TAGU = I.PUID
		<if test="interface != null">
    	   AND IRW.PDATE_RELEASED &gt; SYSDATE - 5
    	   AND ECOIR.PS7_IF_STAT = 'N'
  		</if>
         ORDER BY IRW.PDATE_RELEASED
	</select>
	
	<insert id="insertECOInfoToVPM" parameterType="java.util.HashMap">
		INSERT INTO IF_ECO_INFO_FROM_TC
		      (ECO_NO, ECO_USER, ECO_DEPT
		     , MPNO, MPNO_VER
		     , MPNM
		     , NUM, CHANGE_DIV, OLD_PROJECT, NEW_PROJECT
		     , CPNO, CPNO_VER, CPNM
		     , FUNCTION_NO
		     , PART_TYPE, SEL, CAT, COLOR, COLOR_SECTION
		     , SHOWN_NO
		     , CHANGE_TYPE, IC
		     , SEQ, QTY
		     , OPTION_CONDITION
		     , SUPPLY_MODE, ALT, MODULE_CODE
		     , PLT_STK, AS_STK
		     , COST, TOOL
		     , CHG_DESC
		     , IF_DATE, MOD_DATE)
		SELECT BL.ECO_NO, #{ecoUser, jdbcType=VARCHAR}, #{ecoGroup, jdbcType=VARCHAR}
		     , BL.PARENT_NO MPNO, BL.PARENT_REV MPNO_VER
		     , (SELECT POBJECT_NAME
		          FROM INFODBA.PITEM I
		             , INFODBA.PITEMREVISION IR
		             , INFODBA.PWORKSPACEOBJECT IRW
		         WHERE I.PITEM_ID = BL.PARENT_NO
		           AND I.PUID = IR.RITEMS_TAGU
		           AND IR.PITEM_REVISION_ID = BL.PARENT_REV
		           AND IR.PUID = IRW.PUID
		           AND IRW.PACTIVE_SEQ = 1) MPNM
		     , BL.NUM, 'NEW' CHANGE_DIV, BL.OLD_PROJECT, BL.NEW_PROJECT
		     , BL.NEW_PART_NO CPNO, BL.NEW_PART_REV CPNO_VER, PP.PART_NAME CPNM
		     , GET_RELATED_FUNCTION(BL.NEW_PART_NO) FUNCTION_NO
		     , PP.PART_TYPE, PP.SEL, PP.CAT, PP.COLOR, PP.COLOR_SECTION
		     , PP.SHOWN_NO
		     , BL.CT CHANGE_TYPE, BL.NEW_IC IC
		     , BL.NEW_SEQ SEQ, BL.NEW_QTY QTY
		     , TO_CHAR(DECODE_OPTION_CONDITION(BL.NEW_VC)) OPTION_CONDITION
		     , BL.NEW_SMODE SUPPLY_MODE, BL.NEW_APART ALT, BL.NEW_MCODE MODULE_CODE
		     , NULL PLT_STK, NULL AS_STK
		     , BL.NEW_COST COST, BL.NEW_TOOL TOOL
		     , DECODE(BL.NEW_PART_NO, NULL, NULL, CHG_DESC) CHG_DESC
		     , SYSDATE IF_DATE, SYSDATE MOD_DATE
		  FROM (SELECT BL.*
		             , ROWNUM NUM
		          FROM ECO_BOM_LIST BL
		         WHERE ECO_NO = #{ecoNo, jdbcType=VARCHAR}
		           AND EPL_YN = 'Y'
		         ORDER BY PARENT_NO, TO_NUMBER(DECODE(NEW_SEQ, NULL, OLD_SEQ, NEW_SEQ))) BL
		     , (SELECT I.PITEM_ID PART_NO
		             , IR.PITEM_REVISION_ID PART_REV
		             , IR.PS7_PART_TYPE PART_TYPE
		             , IRW.POBJECT_NAME PART_NAME
		             , IRV.PS7_SELECTIVE_PART SEL
		             , IRV.PS7_REGULATION CAT
		             , IRV.PS7_COLOR COLOR
		             , IRV.PS7_COLOR_ID COLOR_SECTION
		             , (SELECT PITEM_ID
		                  FROM INFODBA.PITEM
		                 WHERE PUID = IRV.RS7_SHOWN_PART_NOU) SHOWN_NO
		          FROM INFODBA.PWORKSPACEOBJECT IRW
		             , INFODBA.PS7_VEHPARTREVISION IRV
		             , INFODBA.PITEMREVISION IR
		             , INFODBA.PITEM I
		         WHERE I.PUID = IR.RITEMS_TAGU
		           AND IR.PUID = IRV.PUID(+)
		           AND IR.PUID = IRW.PUID
		           AND IRW.PACTIVE_SEQ = 1) PP
		 WHERE BL.NEW_PART_NO IS NOT NULL
		   AND BL.NEW_PART_NO = PP.PART_NO
		   AND BL.NEW_PART_REV = PP.PART_REV
		UNION
		SELECT BL.ECO_NO, #{ecoUser, jdbcType=VARCHAR}, #{ecoGroup, jdbcType=VARCHAR}
		     , BL.PARENT_NO MPNO, BL.PARENT_REV MPNO_VER
		     , (SELECT POBJECT_NAME
		          FROM INFODBA.PITEM I
		             , INFODBA.PITEMREVISION IR
		             , INFODBA.PWORKSPACEOBJECT IRW
		         WHERE I.PITEM_ID = BL.PARENT_NO
		           AND I.PUID = IR.RITEMS_TAGU
		           AND IR.PITEM_REVISION_ID = BL.PARENT_REV
		           AND IR.PUID = IRW.PUID
		           AND IRW.PACTIVE_SEQ = 1) MPNM
		     , BL.NUM, 'OLD' CHANGE_DIV, BL.OLD_PROJECT, BL.NEW_PROJECT
		     , BL.OLD_PART_NO CPNO, BL.OLD_PART_REV CPNO_VER, PP.PART_NAME CPNM
		     , GET_RELATED_FUNCTION(BL.OLD_PART_NO) FUNCTION_NO
		     , PP.PART_TYPE, PP.SEL, PP.CAT, PP.COLOR, PP.COLOR_SECTION
		     , PP.SHOWN_NO
		     , BL.CT CHANGE_TYPE, BL.OLD_IC IC
		     , BL.OLD_SEQ SEQ, BL.OLD_QTY QTY
		     , TO_CHAR(DECODE_OPTION_CONDITION(BL.OLD_VC)) OPTION_CONDITION
		     , BL.OLD_SMODE SUPPLY_MODE, BL.OLD_APART ALT, BL.OLD_MCODE MODULE_CODE
		     , BL.OLD_PLT_STK PLT_STK, BL.OLD_AS_STK AS_STK
		     , NULL COST, NULL TOOL
		     , DECODE(BL.NEW_PART_NO, NULL, CHG_DESC, NULL) CHG_DESC
		     , SYSDATE IF_DATE, SYSDATE MOD_DATE
		  FROM (SELECT BL.*
		             , ROWNUM NUM
		          FROM ECO_BOM_LIST BL
		         WHERE ECO_NO = #{ecoNo, jdbcType=VARCHAR}
		           AND EPL_YN = 'Y'
		         ORDER BY PARENT_NO, TO_NUMBER(DECODE(NEW_SEQ, NULL, OLD_SEQ, NEW_SEQ))) BL
		     , (SELECT I.PITEM_ID PART_NO
		             , IR.PITEM_REVISION_ID PART_REV
		             , IR.PS7_PART_TYPE PART_TYPE
		             , IRW.POBJECT_NAME PART_NAME
		             , IRV.PS7_SELECTIVE_PART SEL
		             , IRV.PS7_REGULATION CAT
		             , IRV.PS7_COLOR COLOR
		             , IRV.PS7_COLOR_ID COLOR_SECTION
		             , (SELECT PITEM_ID
		                  FROM INFODBA.PITEM
		                 WHERE PUID = IRV.RS7_SHOWN_PART_NOU) SHOWN_NO
		          FROM INFODBA.PWORKSPACEOBJECT IRW
		             , INFODBA.PS7_VEHPARTREVISION IRV
		             , INFODBA.PITEMREVISION IR
		             , INFODBA.PITEM I
		         WHERE I.PUID = IR.RITEMS_TAGU
		           AND IR.PUID = IRV.PUID(+)
		           AND IR.PUID = IRW.PUID
		           AND IRW.PACTIVE_SEQ = 1) PP
		 WHERE BL.OLD_PART_NO IS NOT NULL
		   AND BL.OLD_PART_NO = PP.PART_NO
		   AND BL.OLD_PART_REV = PP.PART_REV
	</insert>
	
	<update id="updateECOInfoInterfacedToVPM" parameterType="java.util.HashMap">      
        UPDATE INFODBA.PS7_ECOREVISION
           SET PS7_IF_STAT = 'Y'
         WHERE PUID = #{ecoUid, jdbcType=VARCHAR}
    </update> 
	
	
	<select id="selectECOEplCorrectionList" parameterType="java.lang.String" resultType="java.util.HashMap">
	<!-- [SR없음][20151016][jclee] 보정 리스트가 나오지 않는 현상 수정
	    SELECT EC.ECO_NO,
	           EC.EPL_YN,
	           EC.OCC_THREADS,
	           EC.CT,
	           EC.PARENT_NO,
	           EC.PARENT_REV,
	           EC.PARENT_TYPE,
	           EC.OLD_PROJECT,
	           EC.NEW_PROJECT,
	           EC.OLD_PART_NO,
	           EC.OLD_PART_REV,
	           EC.OLD_PART_TYPE,
	           EC.NEW_PART_NO,
	           EC.NEW_PART_REV,
	           EC.NEW_PART_TYPE,
	           TO_CHAR(OLD_SEQ) OLD_SEQ,
	           TO_CHAR(NEW_SEQ) NEW_SEQ,
	           TO_CHAR(OLD_QTY) OLD_QTY,
	           TO_CHAR(NEW_QTY) NEW_QTY,
	           EC.OLD_SMODE,
	           EC.NEW_SMODE,
	           EC.OLD_APART,
	           EC.NEW_APART,
	           EC.OLD_MCODE,
	           EC.NEW_MCODE,
	           PKG_COMMON.CONVERT_TO_SIMPLE(OLD_VC) OLD_VC,
	           PKG_COMMON.CONVERT_TO_SIMPLE(NEW_VC) NEW_VC,
	           EC.OLD_IC,
	           EC.NEW_IC,
	           EC.OLD_PLT_STK,
	           EC.OLD_AS_STK,
	           EC.NEW_COST,
	           EC.NEW_TOOL,
	           EC.CHG_DESC,
	           EC.OLD_DESC,
	           EC.CRE_DATE,
	           EC.UPD_USER_ID,
	           EC.UPD_DATE,
	           EC.EPL_ID,
	           EC.OLD_OCCS,
	           OV.PS7_REGULATION OLD_CAT,
	           OV.PS7_COLOR OLD_COLOR,
	           OV.PS7_COLOR_ID OLD_COLOR_SECTION,
	           OIR.PS7_PART_TYPE OLD_PART_ORIGIN,
	           OW.POBJECT_NAME OLD_PART_NAME,
	           OSO.PITEM_ID OLD_SHOWN_ON,
	           OV.PS7_SELECTIVE_PART OLD_SEL,
	           NV.PS7_REGULATION NEW_CAT,
	           NV.PS7_COLOR NEW_COLOR,
	           NV.PS7_COLOR_ID NEW_COLOR_SECTION,
	           NIR.PS7_PART_TYPE NEW_PART_ORIGIN,
	           NW.POBJECT_NAME NEW_PART_NAME,
	           NSO.PITEM_ID NEW_SHOWN_ON,
	           NV.PS7_SELECTIVE_PART NEW_SEL
	      FROM ECO_EPL_CORRECTION          EC,
	           INFODBA.PITEM               NI,
	           INFODBA.PITEMREVISION       NIR,
	           INFODBA.PS7_VEHPARTREVISION NV,
	           INFODBA.PWORKSPACEOBJECT    NW,
	           INFODBA.PITEM               OI,
	           INFODBA.PITEMREVISION       OIR,
	           INFODBA.PS7_VEHPARTREVISION OV,
	           INFODBA.PWORKSPACEOBJECT    OW,
	           INFODBA.PITEM               NSO,
	           INFODBA.PITEM               OSO
	     WHERE ECO_NO = #{ecoNo, jdbcType=VARCHAR}
	       AND EC.NEW_PART_NO = NI.PITEM_ID
	       AND EC.NEW_PART_REV = NIR.PITEM_REVISION_ID
	       AND NI.PUID = NIR.RITEMS_TAGU
	       AND NIR.PUID = NV.PUID
	       AND NW.PACTIVE_SEQ = 1
	       AND NIR.PUID = NW.PUID
	       AND NV.RS7_SHOWN_PART_NOU = NSO.PUID(+)
	       AND EC.OLD_PART_NO = OI.PITEM_ID
	       AND EC.OLD_PART_REV = OIR.PITEM_REVISION_ID
	       AND OI.PUID = OIR.RITEMS_TAGU
	       AND OIR.PUID = OV.PUID
	       AND OW.PACTIVE_SEQ = 1
	       AND OIR.PUID = OW.PUID
	       AND OV.RS7_SHOWN_PART_NOU = OSO.PUID(+)
	-->
	WITH ECO_CORRECTION_INFO AS
		 (SELECT EC.ECO_NO,
		         EC.EPL_YN,
		         EC.OCC_THREADS,
		         EC.CT,
		         EC.PARENT_NO,
		         EC.PARENT_REV,
		         EC.PARENT_TYPE,
		         EC.OLD_PROJECT,
		         EC.NEW_PROJECT,
		         EC.OLD_PART_NO,
		         EC.OLD_PART_REV,
		         EC.OLD_PART_TYPE,
		         EC.NEW_PART_NO,
		         EC.NEW_PART_REV,
		         EC.NEW_PART_TYPE,
		         TO_CHAR(OLD_SEQ) OLD_SEQ,
		         TO_CHAR(NEW_SEQ) NEW_SEQ,
		         TO_CHAR(OLD_QTY) OLD_QTY,
		         TO_CHAR(NEW_QTY) NEW_QTY,
		         EC.OLD_SMODE,
		         EC.NEW_SMODE,
		         EC.OLD_APART,
		         EC.NEW_APART,
		         EC.OLD_MCODE,
		         EC.NEW_MCODE,
		         PKG_COMMON.CONVERT_TO_SIMPLE(OLD_VC) OLD_VC,
		         PKG_COMMON.CONVERT_TO_SIMPLE(NEW_VC) NEW_VC,
		         EC.OLD_IC,
		         EC.NEW_IC,
		         EC.OLD_PLT_STK,
		         EC.OLD_AS_STK,
		         EC.NEW_COST,
		         EC.NEW_TOOL,
		         EC.CHG_DESC,
		         EC.OLD_DESC,
		         EC.CRE_DATE,
		         EC.UPD_USER_ID,
		         EC.UPD_DATE,
		         EC.EPL_ID,
		         EC.OLD_OCCS
		    FROM ECO_EPL_CORRECTION EC
		   WHERE ECO_NO = #{ecoNo, jdbcType=VARCHAR}),
		NEW_PART_INFO AS
		 (SELECT I.PITEM_ID,
		         IR.PITEM_REVISION_ID,
		         V.PS7_REGULATION,
		         V.PS7_COLOR,
		         V.PS7_COLOR_ID,
		         IR.PS7_PART_TYPE,
		         W.POBJECT_NAME,
		         V.PS7_SELECTIVE_PART,
		         SO.PITEM_ID NEW_SHOWN_ON
		    FROM INFODBA.PITEM               I,
		         INFODBA.PITEMREVISION       IR,
		         INFODBA.PS7_VEHPARTREVISION V,
		         INFODBA.PWORKSPACEOBJECT    W,
		         INFODBA.PITEM               SO,
		         ECO_CORRECTION_INFO         EC
		   WHERE I.PUID = IR.RITEMS_TAGU
		     AND IR.PUID = V.PUID
		     AND IR.PUID = W.PUID
		     AND W.PACTIVE_SEQ = 1
		     AND V.RS7_SHOWN_PART_NOU = SO.PUID(+)
		     AND EC.NEW_PART_NO = I.PITEM_ID
		     AND EC.NEW_PART_REV = IR.PITEM_REVISION_ID),
		OLD_PART_INFO AS
		 (SELECT I.PITEM_ID,
		         IR.PITEM_REVISION_ID,
		         V.PS7_REGULATION,
		         V.PS7_COLOR,
		         V.PS7_COLOR_ID,
		         IR.PS7_PART_TYPE,
		         W.POBJECT_NAME,
		         V.PS7_SELECTIVE_PART,
		         SO.PITEM_ID OLD_SHOWN_ON
		    FROM INFODBA.PITEM               I,
		         INFODBA.PITEMREVISION       IR,
		         INFODBA.PS7_VEHPARTREVISION V,
		         INFODBA.PWORKSPACEOBJECT    W,
		         INFODBA.PITEM               SO,
		         ECO_CORRECTION_INFO         EC
		   WHERE I.PUID = IR.RITEMS_TAGU
		     AND IR.PUID = V.PUID
		     AND IR.PUID = W.PUID
		     AND W.PACTIVE_SEQ = 1
		     AND V.RS7_SHOWN_PART_NOU = SO.PUID(+)
		     AND EC.OLD_PART_NO = I.PITEM_ID
		     AND EC.OLD_PART_REV = IR.PITEM_REVISION_ID)
		SELECT DISTINCT EC.ECO_NO,
		                EC.EPL_YN,
		                EC.OCC_THREADS,
		                EC.CT,
		                EC.PARENT_NO,
		                EC.PARENT_REV,
		                EC.PARENT_TYPE,
		                EC.OLD_PROJECT,
		                EC.NEW_PROJECT,
		                EC.OLD_PART_NO,
		                EC.OLD_PART_REV,
		                EC.OLD_PART_TYPE,
		                EC.NEW_PART_NO,
		                EC.NEW_PART_REV,
		                EC.NEW_PART_TYPE,
		                EC.OLD_SEQ,
		                EC.NEW_SEQ,
		                EC.OLD_QTY,
		                EC.NEW_QTY,
		                EC.OLD_SMODE,
		                EC.NEW_SMODE,
		                EC.OLD_APART,
		                EC.NEW_APART,
		                EC.OLD_MCODE,
		                EC.NEW_MCODE,
		                EC.OLD_VC,
		                EC.NEW_VC,
		                EC.OLD_IC,
		                EC.NEW_IC,
		                EC.OLD_PLT_STK,
		                EC.OLD_AS_STK,
		                EC.NEW_COST,
		                EC.NEW_TOOL,
		                EC.CHG_DESC,
		                EC.OLD_DESC,
		                EC.CRE_DATE,
		                EC.UPD_USER_ID,
		                EC.UPD_DATE,
		                EC.EPL_ID,
		                EC.OLD_OCCS,
		                OI.PS7_REGULATION     OLD_CAT,
		                OI.PS7_COLOR          OLD_COLOR,
		                OI.PS7_COLOR_ID       OLD_COLOR_SECTION,
		                OI.PS7_PART_TYPE      OLD_PART_ORIGIN,
		                OI.POBJECT_NAME       OLD_PART_NAME,
		                OI.OLD_SHOWN_ON,
		                OI.PS7_SELECTIVE_PART OLD_SEL,
		                NI.PS7_REGULATION     NEW_CAT,
		                NI.PS7_COLOR          NEW_COLOR,
		                NI.PS7_COLOR_ID       NEW_COLOR_SECTION,
		                NI.PS7_PART_TYPE      NEW_PART_ORIGIN,
		                NI.POBJECT_NAME       NEW_PART_NAME,
		                NI.NEW_SHOWN_ON,
		                NI.PS7_SELECTIVE_PART NEW_SEL
		  FROM ECO_CORRECTION_INFO EC, NEW_PART_INFO NI, OLD_PART_INFO OI
		 WHERE EC.NEW_PART_NO = NI.PITEM_ID(+)
		   AND EC.NEW_PART_REV = NI.PITEM_REVISION_ID(+)
		   AND EC.OLD_PART_NO = OI.PITEM_ID(+)
		   AND EC.OLD_PART_REV = OI.PITEM_REVISION_ID(+)
    </select>
    
    <!-- [20170104][ymjang] S201, SM01 제외  -->
	<select id="selectECOEplCOSModeCompareList" parameterType="java.lang.String" resultType="java.util.HashMap">
	<![CDATA[
		SELECT NEW_PART_NO,
		       NEW_PART_REV
		  FROM (SELECT PARENT_NO,
		               NEW_PART_NO,
		               NEW_PART_REV,
		               ROW_NUMBER() OVER(PARTITION BY NEW_PART_NO, NEW_PART_REV ORDER BY PARENT_NO) G
		          FROM (SELECT DISTINCT S.PARENT_NO, S.NEW_PART_NO, S.NEW_PART_REV
		                  FROM ECO_BOM_LIST S, ECO_BOM_LIST T
		                 WHERE S.NEW_PART_NO = T.NEW_PART_NO
		                   AND S.NEW_PART_REV = T.NEW_PART_REV
		                   AND T.NEW_PART_NO IS NOT NULL
		                   AND T.NEW_PART_REV IS NOT NULL
		                   AND S.PARENT_NO <> T.PARENT_NO
		                   AND S.EPL_YN = 'Y'
		                   AND T.EPL_YN = 'Y'
		                   AND T.NEW_PART_TYPE = 'S7_Vehpart'
		                   AND T.CT = 'F2'
		                   AND S.NEW_SMODE <> T.NEW_SMODE
                           AND S.NEW_SMODE NOT LIKE 'S%'
                           AND T.NEW_SMODE NOT LIKE 'S%'
		                   AND T.ECO_NO = #{ecoNo, jdbcType=VARCHAR}) T1
		         WHERE (CASE WHEN #{ecoNo, jdbcType=VARCHAR} LIKE 'CM%' THEN IS_CONNECTED_FUNCTION(T1.PARENT_NO)
		                     ELSE IS_CONNECTED_NONIF_FUNCTION(T1.PARENT_NO) 
		                END) = 1 )
		         --WHERE IS_CONNECTED_FUNCTION(T1.PARENT_NO) = 1)
		 WHERE G = 1
	]]>
	</select>
	
	<!-- [20170104][ymjang] S201, SM01 제외  -->
	<select id="selectUnGeneratedCOPartList" parameterType="java.lang.String" resultType="java.util.HashMap">
	<![CDATA[
        WITH BOM_LIST AS 
        (
        	SELECT distinct B.PARENT_NO
        	              , B.PARENT_REV
        	              , PKG_EPL_CORRECTION.GET_LATEST_RELEASE_REV_ID(B.PARENT_NO) AS LAST_REV_ID
        	              , B.NEW_PART_NO
        	              , B.NEW_PART_REV
        	              , B.NEW_SEQ
        	              , A.NEW_PART_NO AS ANEW_PART_NO
        	              , A.NEW_PART_REV AS ANEW_PART_REV
            FROM ECO_BOM_LIST A
               , ECO_BOM_LIST B
            WHERE A.ECO_NO = #{ecoNo, jdbcType=VARCHAR}
            AND A.ECO_NO <> B.ECO_NO
            AND A.EPL_YN = 'Y'
            AND B.EPL_YN = 'Y'
            AND A.CT <> 'D'
            AND B.CT <> 'D'
            AND A.OLD_PART_NO = A.NEW_PART_NO
            AND A.NEW_PART_NO = B.NEW_PART_NO
            AND A.OLD_PART_REV = B.NEW_PART_REV
            AND A.OLD_PART_REV <> A.NEW_PART_REV
            AND A.PARENT_NO NOT IN (SELECT PARENT_NO
                                    FROM ECO_BOM_LIST C
                                    WHERE C.ECO_NO = A.ECO_NO
                                    AND C.NEW_PART_NO = A.NEW_PART_NO
                                    AND C.NEW_PART_REV = A.NEW_PART_REV)
        )
		SELECT PARENT_NO, PARENT_REV, NEW_PART_NO, NEW_PART_REV, NEW_SEQ
        FROM BOM_LIST
        WHERE PARENT_REV = LAST_REV_ID
        AND (CASE WHEN #{ecoNo, jdbcType=VARCHAR} LIKE 'CM%' 
                  THEN IS_CONNECTED_FUNCTIONS(PARENT_NO,PARENT_REV,'N')
                  ELSE IS_CONNECTED_NONIF_FUNCTIONS(PARENT_NO,PARENT_REV,'N')
                  END) = 1
	]]>
    <!--   
    SELECT *
      FROM (SELECT DISTINCT B.PARENT_NO,
                            B.PARENT_REV,
                            B.NEW_PART_NO,
                            B.NEW_PART_REV,
                            B.NEW_SEQ
              FROM ECO_BOM_LIST A, ECO_BOM_LIST B
             WHERE A.ECO_NO = #{ecoNo, jdbcType=VARCHAR}
               AND A.ECO_NO <> B.ECO_NO
               AND A.EPL_YN = 'Y'
               AND B.EPL_YN = 'Y'
               AND A.CT <> 'D'
               AND B.CT <> 'D'
               AND A.OLD_PART_NO = A.NEW_PART_NO
               AND A.NEW_PART_NO = B.NEW_PART_NO
               AND A.OLD_PART_REV = B.NEW_PART_REV
               AND A.OLD_PART_REV <> A.NEW_PART_REV
               AND B.PARENT_NO NOT IN
                   (SELECT PARENT_NO
                      FROM ECO_BOM_LIST C
                     WHERE C.ECO_NO = A.ECO_NO
                       AND C.NEW_PART_NO = A.NEW_PART_NO
                       AND C.NEW_PART_REV = A.NEW_PART_REV)
                 AND B.PARENT_REV = PKG_EPL_CORRECTION.GET_LATEST_RELEASE_REV_ID(B.PARENT_NO)) T
       WHERE (CASE WHEN #{ecoNo, jdbcType=VARCHAR} LIKE 'CM%' THEN IS_CONNECTED_FUNCTION(T.PARENT_NO)
                 ELSE IS_CONNECTED_NONIF_FUNCTION(T.PARENT_NO)
            END) = 1

         -->
	</select>
	
	<select id="selectECOChangeCause" parameterType="java.lang.String" resultType="java.util.HashMap">
	<![CDATA[
		SELECT ECO_NO, SEQ_NO, PROJECT_CODE, CHANGE_CAUSE, END_ITEM_COUNT_A, END_ITEM_COUNT_M FROM ECO_ADMIN_CHANGE_CAUSE WHERE ECO_NO = #{ECO_NO, jdbcType=VARCHAR} ORDER BY SEQ_NO
	]]>	
	</select>
	<insert id="insertECOChangeCause" parameterType="java.util.HashMap">
		INSERT INTO ECO_ADMIN_CHANGE_CAUSE
			(ECO_NO, SEQ_NO, PROJECT_CODE, CHANGE_CAUSE, END_ITEM_COUNT_A, END_ITEM_COUNT_M)
		VALUES 
			(#{ECO_NO, jdbcType=VARCHAR}, #{SEQ_NO, jdbcType=VARCHAR}, #{PROJECT_CODE, jdbcType=VARCHAR}, #{CHANGE_CAUSE, jdbcType=VARCHAR}, #{END_ITEM_COUNT_A, jdbcType=VARCHAR}, #{END_ITEM_COUNT_M, jdbcType=VARCHAR})
	</insert>
	<delete id="deleteECOChangeCause" parameterType="java.util.HashMap">
		DELETE ECO_ADMIN_CHANGE_CAUSE WHERE ECO_NO = #{ECO_NO, jdbcType=VARCHAR}
	</delete>
	
	<!--[20161220][ymjang] SUPPLY MODE 'P7UP8' AND MODULE CODE IN ('FCM', 'RCM') 추가 -->
	<!--[20160922][ymjang] Supply Mode 'P7CP8' 추가 -->
	<select id="selectECOEplEndItemList" parameterType="java.lang.String" resultType="java.util.HashMap">
	<![CDATA[
	    SELECT DISTINCT POBJECT_NAME
	      FROM ECO_BOM_LIST                E,
	           INFODBA.PITEM               I,
	           INFODBA.PITEMREVISION       IR,
	           INFODBA.PWORKSPACEOBJECT    W,
	           IF_EITEM_FROM_HBOM          EI
	     WHERE I.PUID = IR.RITEMS_TAGU
	       AND IR.PUID = W.PUID
	       AND W.PACTIVE_SEQ = 1
	       AND I.PITEM_ID = E.NEW_PART_NO
	       AND IR.PITEM_REVISION_ID = E.NEW_PART_REV
	       AND EI.S_PART_NUMBER = E.NEW_SMODE
	       AND EI.ENDITEM_YN = 'Y'
	       --AND IS_END_ITEM(E.NEW_SMODE) = 'Y'
	       AND E.EPL_YN = 'Y'
	       AND E.CT <> 'D'
	       AND 1 = CASE WHEN E.NEW_SMODE IN ('P1YP8', 'P0') THEN 0
                        WHEN E.NEW_SMODE = 'P7UP8' AND E.NEW_MCODE IN ('FCM', 'RCM') THEN 1
	                    WHEN E.NEW_SMODE IN ('P7YP8', 'PDYP8', 'P7MP8', 'PDMP8') THEN
	                        CASE
	                          WHEN E.PARENT_TYPE = 'S7_FunctionMast' AND E.NEW_MCODE IS NOT NULL THEN 1
	                          ELSE 0
	                        END
	                    -- WHEN IS_END_ITEM(E.NEW_SMODE) = 'Y' THEN 1
	                    WHEN E.NEW_SMODE IN ('C0 P7', 'C1', 'C1 P7', 'C7', 'C7 P7', 'CD', 'P1', 'P7', 'P7MP8', 'PD', 'PDMP8', 'P7CP8') THEN 1
	                    ELSE 0
	               END
	       AND E.ECO_NO = #{ECO_NO, jdbcType=VARCHAR}
	]]>
	</select>
	
	<select id="selectECOEplEndItemNameList" parameterType="java.lang.String" resultType="java.util.HashMap">
		SELECT E.PART_NAME, E.CT, E.SMODE, CHANGE_CAUSE, EDITABLE
		  FROM ECO_ADMIN_END_ITEM_LIST E
		 WHERE E.ECO_NO = #{ECO_NO, jdbcType=VARCHAR}
		 ORDER BY E.EDITABLE, E.PART_NAME, E.CT, E.SMODE
	</select>
	
	
	<!--[20161220][ymjang] SUPPLY MODE 'P7UP8' AND MODULE CODE IN ('FCM', 'RCM') 추가 -->
	<!--[20160922][ymjang] Supply Mode 'P7CP8' 추가 -->
	<select id="selectECOBOMListEndItemNameList" parameterType="java.lang.String" resultType="java.util.HashMap">
	<![CDATA[
		SELECT DISTINCT W.POBJECT_NAME PART_NAME,
                        E.CT,
                        E.NEW_SMODE SMODE,
                        '' CHANGE_CAUSE,
                        'FALSE' EDITABLE
          FROM ECO_BOM_LIST             E,
               INFODBA.PITEM            I,
               INFODBA.PITEMREVISION    IR,
               INFODBA.PWORKSPACEOBJECT W,
               IF_EITEM_FROM_HBOM       EI
         WHERE I.PUID = IR.RITEMS_TAGU
           AND IR.PUID = W.PUID
           AND W.PACTIVE_SEQ = 1
           AND IR.PITEM_REVISION_ID =
               (SELECT MAX(TIR.PITEM_REVISION_ID)
                  FROM INFODBA.PITEMREVISION TIR
                 WHERE I.PUID = TIR.RITEMS_TAGU)
           AND I.PITEM_ID = E.NEW_PART_NO
           AND EI.S_PART_NUMBER = E.NEW_SMODE
           AND EI.ENDITEM_YN = 'Y'
           --AND IS_END_ITEM(E.NEW_SMODE) = 'Y'
           AND E.CT <> 'D'
           AND E.EPL_YN = 'Y'           
	       AND 1 = CASE WHEN E.NEW_SMODE IN ('P1YP8', 'P0') THEN 0
	                    WHEN E.NEW_SMODE = 'P7UP8' AND E.NEW_MCODE IN ('FCM', 'RCM') THEN 1
	                    WHEN E.NEW_SMODE IN ('P7YP8', 'PDYP8', 'P7MP8', 'PDMP8') THEN
	                        CASE
	                          WHEN E.PARENT_TYPE = 'S7_FunctionMast' AND E.NEW_MCODE IS NOT NULL THEN 1
	                          ELSE 0
	                        END
	                    -- WHEN IS_END_ITEM(E.NEW_SMODE) = 'Y' THEN 1
	                    WHEN E.NEW_SMODE IN ('C0 P7', 'C1', 'C1 P7', 'C7', 'C7 P7', 'CD', 'P1', 'P7', 'P7MP8', 'PD', 'PDMP8', 'P7CP8') THEN 1
	                    ELSE 0
	               END           
           AND E.ECO_NO = #{ECO_NO, jdbcType=VARCHAR}
      ORDER BY PART_NAME, CT, SMODE
	]]>
	</select>
	
	<insert id="insertECOEplEndItemList" parameterType="java.util.HashMap">
		INSERT INTO ECO_ADMIN_END_ITEM_LIST 
			(ECO_NO,
			 PART_NAME,
			 CT,
			 SMODE,
			 CHANGE_CAUSE,
			 EDITABLE)
		VALUES 
			(#{ECO_NO, jdbcType=VARCHAR},
			 #{PART_NAME, jdbcType=VARCHAR},
			 #{CT, jdbcType=VARCHAR},
			 #{SMODE, jdbcType=VARCHAR},
			 #{CHANGE_CAUSE, jdbcType=VARCHAR},
			 #{EDITABLE, jdbcType=VARCHAR})
	</insert>
	
	<delete id="deleteECOEplEndItemList" parameterType="java.util.HashMap">
		DELETE ECO_ADMIN_END_ITEM_LIST WHERE ECO_NO = #{ECO_NO, jdbcType=VARCHAR}
	</delete>
	
	<!-- [SR151204-016][20151209][jclee] DWG, EPL Change Desc에 Revision의 Change Desc 입력용 Query -->
	<select id="getChangeDescription" parameterType="java.util.HashMap" resultType="String">
	<![CDATA[
		SELECT CASE
		         WHEN W.POBJECT_TYPE = 'S7_FunctionMastRevision' THEN
		          W.POBJECT_DESC
		         WHEN W.POBJECT_TYPE = 'S7_VehpartRevision' THEN
		          (SELECT V.PS7_CHANGE_DESCRIPTION FROM INFODBA.PS7_VEHPARTREVISION V WHERE V.PUID = W.PUID)
		         ELSE
		          ''
		       END
		  FROM INFODBA.PITEM I, INFODBA.PITEMREVISION IR, INFODBA.PWORKSPACEOBJECT W
		 WHERE I.PUID = IR.RITEMS_TAGU
		   AND IR.PUID = W.PUID
		   AND W.PACTIVE_SEQ = 1
		   AND I.PITEM_ID = #{partNo, jdbcType=VARCHAR}
		   AND IR.PITEM_REVISION_ID = #{partRevNo, jdbcType=VARCHAR}
	]]>
	</select>
	
	<select id="getECOAdminCheckCommonMemo" resultType="String">
		SELECT M.COMMON_MEMO
		  FROM ECO_ADMIN_COMMON_MEMO M
		 WHERE M.CREATE_DATE = (SELECT MAX(T.CREATE_DATE) FROM ECO_ADMIN_COMMON_MEMO T)
	</select>
	
	<insert id="insertECOAdminCheckCommonMemo" parameterType="java.util.HashMap">
		INSERT INTO ECO_ADMIN_COMMON_MEMO
			(COMMON_MEMO)
		VALUES 
			(#{COMMON_MEMO, jdbcType=VARCHAR})
	</insert>
  
   <!-- 설계변경 현황 Option Category  리스트 -->
    <select id="getEcoStatusOptCategoryList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
      WITH STD_INFO
           AS (SELECT MASTER_PUID
                 FROM ECO_RPT_STD_INFO S
                WHERE     1 = 1
                      <if test="PROJECT_NO != null">
                        AND S.PROJECT_NO =#{PROJECT_NO, jdbcType=VARCHAR}
                      </if>
                      <if test="PROJECT_NO == null">
                        AND S.PROJECT_NO IN (  SELECT PS7_PROJECT PROJECT
                                                 FROM INFODBA.PS7_OSPECSET
                                                <if test="GMODEL_NO != null">
                                                WHERE PS7_GMODEL =#{GMODEL_NO, jdbcType=VARCHAR}
                                                </if>
                                             GROUP BY PS7_PROJECT)
                      </if>
                 )     
        SELECT DISTINCT R.OPTION_CATEGORY
          FROM ECO_RPT_CHG_REVIEW R, STD_INFO
         WHERE R.MASTER_PUID = STD_INFO.MASTER_PUID AND R.OPTION_CATEGORY IS NOT NULL
      ORDER BY R.OPTION_CATEGORY
    </select>
    <!-- ECO현황 변경리스트 -->
    <select id="getEcoStatusChangeList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
    WITH CHANGE_LIST AS 
    (
        SELECT 
           DENSE_RANK() OVER(PARTITION BY TO_CHAR(INFO.CREATE_DATE,'YYYY-MM-DD HH24'), PROJECT_NO, OSPEC_ID ORDER BY TO_CHAR(INFO.CREATE_DATE,'YYYY-MM-DD HH24'), PROJECT_NO,OSPEC_ID, OPTION_CATEGORY, REVIEW_CONTENTS) ||
    	       '-'||RANK() OVER(PARTITION BY TO_CHAR(INFO.CREATE_DATE,'YYYY-MM-DD HH24'), PROJECT_NO, OSPEC_ID, OPTION_CATEGORY, REVIEW_CONTENTS ORDER BY TO_CHAR(INFO.CREATE_DATE,'YYYY-MM-DD HH24'), RLIST.UPDATE_DATE DESC, PROJECT_NO, OSPEC_ID, OPTION_CATEGORY, REVIEW_CONTENTS, FUNCTION_ID, PART_NAME) GROUP_SEQ
              , INFO.REGISTER_TYPE, REVIEW.OPTION_CATEGORY, TO_CHAR(RLIST.UPDATE_DATE,'YYYY-MM-DD')CREATE_DATE, RLIST.ECO_PUBLISH
               , CASE WHEN RLIST.ECO_PUBLISH ='사양정리' THEN '사양정리' 
                          WHEN RLIST.ECO_NO IS NOT NULL THEN  --ECO 존재 
                              CASE WHEN RLIST.UPDATE_DATE <![CDATA[<]]> INFO.ECO_COMPLETE_REQ_DATE + 1  THEN --   기간내 요청하고, ECO 완료요청일 이내이면
                                CASE WHEN ECO_REL.ECO_RELEASED_DATE <![CDATA[<]]> INFO.ECO_COMPLETE_REQ_DATE + 1  THEN '기간내 완료' 
                                ELSE '지연 완료' END
                              ELSE '누락/오류 완료' END
                  ELSE -- ECO 미존재
                    CASE WHEN RLIST.ECO_PUBLISH ='필요'THEN
                      CASE WHEN RLIST.UPDATE_DATE <![CDATA[<]]> INFO.ECO_COMPLETE_REQ_DATE + 1  THEN 
                        CASE WHEN SYSDATE <![CDATA[<]]> INFO.ECO_COMPLETE_REQ_DATE  + 1  THEN '기간내 진행중' 
                        ELSE '지연 진행중' END
                      ELSE --기간후
                        '누락/오류 진행중' 
                      END 
                    END    
                  END STATUS      --, RLIST.STATUS ,              
              , RLIST.FUNCTION_ID, RLIST.PART_NAME, INFO.PROJECT_NO, INFO.OSPEC_ID 
              , INFO.CHANGE_DESC , REVIEW.REVIEW_CONTENTS , RLIST.SYSTEM
              , DECODE(RLIST.USER_ID,NULL, RLIST.USER_NAME,RLIST.USER_NAME||'('||RLIST.USER_ID || ')') USER_NAME 
              , TO_CHAR(RLIST.MAIL_SEND_DATE,'YYYY-MM-DD') MAIL_STATUS, RLIST.ECO_NO , TO_CHAR(ECO_REL.ECO_RELEASED_DATE,'YYYY-MM-DD')ECO_COMPLETE_DATE, RLIST.DESCRIPTION
              , RLIST.USER_ID, RLIST.MASTER_PUID, RLIST.OPTION_CATEGORY_PUID, RLIST.PUID
              , ( SELECT DISTINCT POM_G.PNAME GROUP_NAME
                        FROM INFODBA.PPOM_USER PU,INFODBA.PPOM_MEMBER  MEM, INFODBA.PPOM_GROUP  POM_G, INFODBA.PGROUP GRP,INFODBA.PGROUPMEMBER GM
                        WHERE PU.PUID = MEM.RUSERU AND MEM.RGROUPU = POM_G.PUID AND POM_G.PUID = GRP.PUID AND MEM.PUID = GM.PUID
                            AND PU.PSTATUS = '0' AND GM.PSTATUS ='0' AND ROWNUM =1   AND PU.PUSER_ID =RLIST.USER_ID) TEAM_NAME
              , CASE WHEN TEAM_NAME IN(#{powerControlDevelopment},'GASOLINE ENGINE DESIGN','DIESEL ENGINE DESIGN','T/M DESIGN') THEN 'E'
                    WHEN TEAM_NAME IS NULL THEN '' ELSE 'V' END VORT_TYPE   
              , INFO.REGISTER_ID               
              FROM ECO_RPT_STD_INFO INFO , ECO_RPT_LIST RLIST, ECO_RPT_CHG_REVIEW REVIEW,
                         (SELECT (WSO.PDATE_RELEASED + 9/24) ECO_RELEASED_DATE, PI.PITEM_ID ITEM_ID 
                                 FROM INFODBA.PITEM PI, INFODBA.PITEMREVISION PREV, INFODBA.PWORKSPACEOBJECT WSO
                              WHERE PREV.RITEMS_TAGU = PI.PUID AND PREV.PUID = WSO.PUID AND WSO.POBJECT_TYPE ='S7_ECORevision' AND WSO.PACTIVE_SEQ = 1) ECO_REL
            WHERE INFO.MASTER_PUID = RLIST.MASTER_PUID 
                AND INFO.MASTER_PUID = REVIEW.MASTER_PUID
                AND RLIST.OPTION_CATEGORY_PUID = REVIEW.OPTION_CATEGORY_PUID    
                AND ECO_REL.ITEM_ID(+) = RLIST.ECO_NO
                <if test="PROJECT_NO != null">
                        AND INFO.PROJECT_NO =#{PROJECT_NO, jdbcType=VARCHAR}
                </if>
                <if test="GMODEL_NO != null">
                        AND INFO.PROJECT_NO IN (  SELECT PS7_PROJECT PROJECT FROM INFODBA.PS7_OSPECSET
                                                                 WHERE PS7_GMODEL =#{GMODEL_NO, jdbcType=VARCHAR} GROUP BY PS7_PROJECT)
                </if>
                <if test="MASTER_PUID != null">
                        AND RLIST.MASTER_PUID IN
                             <foreach item="item" index="index" collection="MASTER_PUID" open="(" separator="," close=")" >
     	                        #{item, jdbcType=VARCHAR}
                             </foreach>
                </if>
                <if test="OSPEC_ID != null">
                        AND INFO.OSPEC_ID LIKE #{OSPEC_ID, jdbcType=VARCHAR}
                </if>
                ORDER BY  TO_CHAR(INFO.CREATE_DATE,'YYYY-MM-DD HH24') DESC
    ) SELECT CHANGE_LIST.*,
                 CASE WHEN STATUS = '누락/오류 완료' OR STATUS= '지연 완료'
                 THEN  
                      (SELECT REF_ECO.PS7_NOTE 
                          FROM INFODBA.PS7_ECOREVISION ECO , INFODBA.PITEM PI, 
                               INFODBA.PITEMREVISION PREV, INFODBA.PS7_ECO_TYPEDREFERENCE  REF_ECO
                          WHERE ECO.PUID = PREV.PUID
                              AND PREV.RITEMS_TAGU = PI.PUID AND REF_ECO.PUID = ECO.RS7_ECO_TYPEDREFERENCEU
                              AND PI.PITEM_ID = ECO_NO
                              AND ROWNUM =1)
                 END ADMIN_DESC
             FROM CHANGE_LIST                  
             WHERE 1=1 
               <if test="VORT_TYPE != null">
                        AND CASE WHEN TEAM_NAME IN(#{powerControlDevelopment},'GASOLINE ENGINE DESIGN','DIESEL ENGINE DESIGN','T/M DESIGN') THEN 'E'
                                        WHEN TEAM_NAME IS NULL OR UPPER(TEAM_NAME) ='DBA'THEN 'N' ELSE 'V' END =#{VORT_TYPE, jdbcType=VARCHAR}
                </if>
                <if test="FUNCTION_ID != null">
                        AND UPPER(FUNCTION_ID) LIKE UPPER(#{FUNCTION_ID, jdbcType=VARCHAR})
                </if>   
                <if test="USER_NAME != null">
                        AND USER_NAME LIKE #{USER_NAME, jdbcType=VARCHAR}
                </if>
                <if test="STATUS != null">
                        AND STATUS LIKE #{STATUS, jdbcType=VARCHAR}
                </if>
                <if test="ECO_PUBLISH != null">
                        AND ECO_PUBLISH LIKE #{ECO_PUBLISH, jdbcType=VARCHAR}
                </if>                
    </select>
    
    <!-- ECO Null Value 리스트 -->
    <select id="getEcoNullValueList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
      select PARENT_NO, NEW_PART_NO, NEW_SEQ
      from eco_bom_list
      where eco_no = #{ECO_NO, jdbcType=VARCHAR}
      and new_part_no is not null
      and ct != 'D'
      and new_part_type != 'S7_FunctionMast'
      and new_bi_system_code is null
      and 1 = (select 1 
               from infodba.pitem i
                  , infodba.pitemrevision ir
                  , infodba.pworkspaceobject wo
               where i.puid = ir.ritems_tagu
               and ir.puid = wo.puid
               and i.pitem_id = parent_no
               and ir.pitem_revision_id = parent_rev
               and wo.PDATE_RELEASED is null
              )
      <if test="PRJ_CD != null">
        and 
             <foreach item="item" index="index" collection="PRJ_CD" open="(" separator="or" close=")" >
              new_project like '%'||#{item, jdbcType=VARCHAR}||'%'
             </foreach>
      </if>
    </select>
    
    <select id="getSysGuid" resultType="string">
      SELECT SYS_GUID() SYS_GUID FROM DUAL
    </select> 
    
    <select id="getMultiSysGuidList"  resultType="string" >
          <foreach collection="tableList" item="item" index="index" separator="UNION" open="" close=""  >
            SELECT SYS_GUID() SYS_GUID FROM DUAL
          </foreach>
    </select>
   <!-- 설계변경 현황 기준정보 등록 -->
   <insert  id="insertRptStdInfo">
       INSERT INTO ECO_RPT_STD_INFO (MASTER_PUID,
                                  PROJECT_NO,
                                  OSPEC_ID,
                                  STAGE_TYPE,
                                  CHANGE_DESC,
                                  APPLY_DATE,
                                  OSPEC_RECEIPT_DATE,
                                  ECO_COMPLETE_REQ_DATE,
                                  REGISTER_TYPE,
                                  REGISTER_ID,
                                  CREATE_DATE)
         VALUES ( #{MASTER_PUID, jdbcType=VARCHAR},
                       #{PROJECT_NO, jdbcType=VARCHAR},
                       #{OSPEC_ID, jdbcType=VARCHAR},
                       #{STAGE_TYPE, jdbcType=VARCHAR},
                       #{CHANGE_DESC, jdbcType=VARCHAR},
                       TO_DATE(#{APPLY_DATE, jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS'),
                       TO_DATE(#{OSPEC_RECEIPT_DATE, jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS'),
                       TO_DATE(#{ECO_COMPLETE_REQ_DATE, jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS'),
                       #{REGISTER_TYPE, jdbcType=VARCHAR},
                       #{REGISTER_ID, jdbcType=VARCHAR},
                       TO_DATE(#{CREATE_DATE, jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS')
                     )
   </insert>
   <!--  설계변경 현황 검토정보 등록 -->
   <insert id="insertRptChgReview">
      INSERT INTO ECO_RPT_CHG_REVIEW (OPTION_CATEGORY_PUID,
                                                                MASTER_PUID,
                                                                OPTION_CATEGORY,
                                                                REVIEW_CONTENTS)
                                     VALUES (#{OPTION_CATEGORY_PUID, jdbcType=VARCHAR},
                                          	       #{MASTER_PUID, jdbcType=VARCHAR},
                                                   #{OPTION_CATEGORY, jdbcType=VARCHAR},
                                                   #{REVIEW_CONTENTS, jdbcType=VARCHAR}
                                                   )   
   </insert>
   <!-- 설계변경 현황 설계변경 리스트 등록 -->
   <insert id="insertRptList">
   INSERT INTO ECO_RPT_LIST (MASTER_PUID,
                                                OPTION_CATEGORY_PUID,
                                                ECO_PUBLISH,
                                                FUNCTION_ID,
                                                PART_NAME,
                                                SYSTEM,
                                                USER_ID,
                                                USER_NAME,
                                                TEAM_NAME,
                                                ECO_NO,
                                                DESCRIPTION,
                                                UPDATE_DATE
                                                )
                                VALUES (
                                              #{MASTER_PUID, jdbcType=VARCHAR},
                                              #{OPTION_CATEGORY_PUID, jdbcType=VARCHAR},
                                              #{ECO_PUBLISH, jdbcType=VARCHAR},
                                              #{FUNCTION_ID, jdbcType=VARCHAR},
                                              #{PART_NAME, jdbcType=VARCHAR},
                                              #{SYSTEM, jdbcType=VARCHAR},
                                              #{USER_ID, jdbcType=VARCHAR},
                                              #{USER_NAME, jdbcType=VARCHAR},
                                              #{TEAM_NAME, jdbcType=VARCHAR},
                                              #{ECO_NO, jdbcType=VARCHAR},
                                              #{DESCRIPTION, jdbcType=VARCHAR},
                                              TO_DATE(#{UPDATE_DATE, jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS')
                                            )
   </insert>
   <!--  설계변경 현황 기준정보 조회(중복유무를 체크 위함) -->
   <select id="getDupRptInfoList" parameterType="java.util.HashMap" resultType="String">
       SELECT I.MASTER_PUID FROM ECO_RPT_STD_INFO I
        WHERE I.PROJECT_NO = #{PROJECT_NO, jdbcType=VARCHAR} 
            AND I.OSPEC_ID=#{OSPEC_ID, jdbcType=VARCHAR} 
            AND I.STAGE_TYPE=#{STAGE_TYPE, jdbcType=VARCHAR}
   </select>
   <!-- 설계변경 현황 기준정보 삭제 -->
   <delete id="deleteRptStdInfo" parameterType="java.util.HashMap">
      DELETE ECO_RPT_STD_INFO WHERE MASTER_PUID = #{MASTER_PUID, jdbcType=VARCHAR}
   </delete>
   <!-- 설계변경 현황 변경 검토정보 삭제 -->
   <delete id="deleteChgReview" parameterType="java.util.HashMap">
      DELETE ECO_RPT_CHG_REVIEW WHERE MASTER_PUID = #{MASTER_PUID, jdbcType=VARCHAR}
   </delete>
   <!-- 설계변경 현황 변경 리스트 삭제 -->
   <delete id="deleteRptList" parameterType="java.util.HashMap">
      DELETE ECO_RPT_LIST WHERE MASTER_PUID = #{MASTER_PUID, jdbcType=VARCHAR}
   </delete>   
   <!-- 설계변경 현황 Option Condition 삭제 -->
   <delete id="deleteRptOptCnd" parameterType="java.util.HashMap">
      DELETE ECO_RPT_OPT_CONDITION WHERE MASTER_PUID = #{MASTER_PUID, jdbcType=VARCHAR}
   </delete>    
   
    <!-- ECO 전체 현황 리스트-->
    <select id="getEcoTotalStatusList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
         WITH STATUS_LIST
        AS
        (
        SELECT INFO.STAGE_TYPE, INFO.PROJECT_NO, INFO.OSPEC_ID , INFO.CHANGE_DESC
              , INFO.APPLY_DATE, INFO.OSPEC_RECEIPT_DATE 
              , MIN(RLIST.MAIL_SEND_DATE) FIRST_MAIL_SEND_DATE
              , INFO.ECO_COMPLETE_REQ_DATE 
              , (TRUNC(ECO_COMPLETE_REQ_DATE) - TRUNC(INFO.OSPEC_RECEIPT_DATE) +1) CHANGE_PERIOD 
              , MAX( CASE WHEN RLIST.ECO_NO IS NOT NULL  AND  RLIST.ECO_PUBLISH = '필요'
                     THEN ECO_REL.ECO_RELEASED_DATE END
                )  ECO_LAST_COMPLETE_DATE
              , MIN( CASE WHEN RLIST.ECO_NO IS NOT NULL AND RLIST.UPDATE_DATE <![CDATA[<]]> INFO.ECO_COMPLETE_REQ_DATE + 1  AND  RLIST.ECO_PUBLISH !='사양정리' 
                     THEN ECO_REL.ECO_RELEASED_DATE END
                )  ECO_FIRST_COMPLETE_DATE                
              , COUNT(RLIST.MASTER_PUID) TOTAL_CNT
              , COUNT(CASE WHEN RLIST.ECO_PUBLISH ='필요' THEN RLIST.ECO_PUBLISH END) REQUIRED_ECO_CNT
              , COUNT(CASE WHEN RLIST.ECO_PUBLISH ='필요' AND RLIST.ECO_NO IS NOT NULL THEN
                        CASE WHEN RLIST.UPDATE_DATE <![CDATA[<]]> INFO.ECO_COMPLETE_REQ_DATE + 1   THEN
                            CASE WHEN ECO_REL.ECO_RELEASED_DATE <![CDATA[<]]> INFO.ECO_COMPLETE_REQ_DATE + 1   THEN '기간내 완료' END
                        END
                      END) IN_COMPLETE
              , COUNT(CASE WHEN RLIST.ECO_PUBLISH ='필요' AND RLIST.ECO_NO IS NOT NULL THEN
                        CASE WHEN RLIST.UPDATE_DATE <![CDATA[<]]> INFO.ECO_COMPLETE_REQ_DATE  + 1  THEN
                            CASE WHEN ECO_REL.ECO_RELEASED_DATE <![CDATA[>=]]> INFO.ECO_COMPLETE_REQ_DATE  + 1   THEN '지연 완료' END
                        END
                      END) DELAY_COMPLETE 
              , COUNT(CASE WHEN  RLIST.ECO_PUBLISH ='필요' AND RLIST.ECO_NO IS NOT NULL THEN
                        CASE WHEN RLIST.UPDATE_DATE <![CDATA[>=]]> INFO.ECO_COMPLETE_REQ_DATE  + 1   THEN '누락/오류 완료' END
                      END) MISS_ERR_COMPLETE     
              , COUNT(CASE WHEN RLIST.ECO_NO IS NULL THEN
                        CASE WHEN RLIST.ECO_PUBLISH ='필요'THEN
                            CASE WHEN RLIST.UPDATE_DATE <![CDATA[<]]> INFO.ECO_COMPLETE_REQ_DATE  + 1    THEN 
                                CASE WHEN SYSDATE <![CDATA[<]]> INFO.ECO_COMPLETE_REQ_DATE  + 1    THEN '기간내 진행중' END
                            END    
                        END    
                      END) IN_PROCESSING      
              , COUNT(CASE WHEN RLIST.ECO_NO IS NULL THEN
                        CASE WHEN RLIST.ECO_PUBLISH ='필요'THEN
                            CASE WHEN RLIST.UPDATE_DATE <![CDATA[<]]> INFO.ECO_COMPLETE_REQ_DATE  + 1   THEN 
                                CASE WHEN SYSDATE <![CDATA[>=]]> INFO.ECO_COMPLETE_REQ_DATE  + 1  THEN '지연 진행중' END
                            END    
                        END    
                      END) DELAY_PROCESSING
              , COUNT(CASE WHEN RLIST.ECO_NO IS NULL THEN
                        CASE WHEN RLIST.ECO_PUBLISH ='필요'THEN
                            CASE WHEN RLIST.UPDATE_DATE <![CDATA[>=]]> INFO.ECO_COMPLETE_REQ_DATE  + 1   THEN '누락/오류 진행중' END    
                        END    
                      END) MISS_ERR_PROCESSING          
              , COUNT(CASE WHEN RLIST.ECO_PUBLISH ='사양정리' THEN '사양정리' END) SPEC_ARRANGE
              , INFO.DESCRIPTION
              , INFO.CREATE_DATE                     
              , INFO.MASTER_PUID
              FROM  ECO_RPT_STD_INFO INFO, ECO_RPT_LIST RLIST,
                      (SELECT (WSO.PDATE_RELEASED + 9/24) ECO_RELEASED_DATE, PI.PITEM_ID ITEM_ID 
                            FROM INFODBA.PITEM PI, INFODBA.PITEMREVISION PREV, INFODBA.PWORKSPACEOBJECT WSO
                        WHERE PREV.RITEMS_TAGU = PI.PUID AND PREV.PUID = WSO.PUID AND WSO.POBJECT_TYPE ='S7_ECORevision' ) ECO_REL
            WHERE INFO.MASTER_PUID = RLIST.MASTER_PUID
                AND ECO_REL.ITEM_ID(+) = RLIST.ECO_NO
                GROUP BY INFO.STAGE_TYPE , INFO.PROJECT_NO, INFO.OSPEC_ID ,INFO.CHANGE_DESC , INFO.OSPEC_RECEIPT_DATE, INFO.APPLY_DATE
                , INFO.ECO_COMPLETE_REQ_DATE , INFO.DESCRIPTION, INFO.MASTER_PUID, INFO.CREATE_DATE 
                ORDER BY PROJECT_NO, OSPEC_ID
         ),
         STATUS_ALL_LIST
        AS
        (
        SELECT  
           CASE WHEN ECO_COMPLETE_REQ_DATE IS NULL THEN '미관리' 
           ELSE
               CASE WHEN IN_PROCESSING >0 OR DELAY_PROCESSING >0 OR MISS_ERR_PROCESSING >0 THEN
                        CASE WHEN DELAY_PROCESSING >0 OR MISS_ERR_PROCESSING >0 THEN '진행중_2' 
                            ELSE '진행중'
                        END
               ELSE  
                   CASE WHEN DELAY_COMPLETE >0 OR MISS_ERR_COMPLETE >0 THEN '완료_2' 
                        ELSE '완료'
                   END  
               END                     
           END
           STATUS_FLAG
           , STAGE_TYPE, PROJECT_NO, OSPEC_ID , CHANGE_DESC
           , TO_CHAR(APPLY_DATE,'YYYY-MM-DD') APPLY_DATE, TO_CHAR(OSPEC_RECEIPT_DATE,'YYYY-MM-DD') OSPEC_RECEIPT_DATE
           , TO_CHAR(FIRST_MAIL_SEND_DATE,'YYYY-MM-DD') FIRST_MAIL_SEND_DATE, TO_CHAR(ECO_COMPLETE_REQ_DATE,'YYYY-MM-DD')ECO_COMPLETE_REQ_DATE 
           , TO_CHAR(CHANGE_PERIOD) CHANGE_PERIOD
           , TO_CHAR(ECO_LAST_COMPLETE_DATE,'YYYY-MM-DD') ECO_LAST_COMPLETE_DATE
           , TO_CHAR( CASE WHEN (TRUNC(ECO_LAST_COMPLETE_DATE) - TRUNC(OSPEC_RECEIPT_DATE)+1) <![CDATA[<]]>0 THEN 1 ELSE TRUNC(ECO_LAST_COMPLETE_DATE) - TRUNC(OSPEC_RECEIPT_DATE)+1 END ) REAL_CHANGE_PERIOD 
           , TO_CHAR(ECO_FIRST_COMPLETE_DATE,'YYYY-MM-DD') ECO_FIRST_COMPLETE_DATE           
           , TO_CHAR(TRUNC(ECO_LAST_COMPLETE_DATE) - TRUNC(ECO_FIRST_COMPLETE_DATE) +1) LAST_FIRST_PERIOD
           , TOTAL_CNT , REQUIRED_ECO_CNT, IN_COMPLETE, DELAY_COMPLETE, MISS_ERR_COMPLETE, IN_PROCESSING, DELAY_PROCESSING, MISS_ERR_PROCESSING, SPEC_ARRANGE
           , TO_CHAR(CREATE_DATE, 'YYYY-MM-DD') CREATE_DATE_STR
           , CASE WHEN (DELAY_COMPLETE >0 AND MISS_ERR_COMPLETE >0) OR (DELAY_COMPLETE >0 AND MISS_ERR_PROCESSING >0) OR 
                       (DELAY_PROCESSING >0 AND MISS_ERR_COMPLETE >0) OR (DELAY_PROCESSING >0 AND MISS_ERR_PROCESSING >0) THEN '지연/누락처리'
                  WHEN DELAY_COMPLETE >0 OR DELAY_PROCESSING >0 THEN '지연처리'   
                  WHEN MISS_ERR_COMPLETE >0 OR MISS_ERR_PROCESSING >0 THEN '누락처리'   
                  WHEN IN_COMPLETE >0 OR IN_PROCESSING >0 THEN '기간내처리'   
             END AS DESCRIPTION            
           , MASTER_PUID , CREATE_DATE
         FROM STATUS_LIST 
         ORDER BY CREATE_DATE DESC, PROJECT_NO, OSPEC_ID
        )
         SELECT * FROM  STATUS_ALL_LIST
             WHERE 1=1 
                <if test="PROJECT_NO != null">
                        AND PROJECT_NO =#{PROJECT_NO, jdbcType=VARCHAR}
                </if>
                <if test="STAGE_TYPE != null">
                        AND STAGE_TYPE =#{STAGE_TYPE, jdbcType=VARCHAR}
                </if>     
                <if test="STATUS_FLAG != null">
                        AND STATUS_FLAG LIKE #{STATUS_FLAG, jdbcType=VARCHAR}|| <![CDATA['%']]>
                </if>     
                <if test="DESCRIPTION != null">
                        AND DESCRIPTION =#{DESCRIPTION, jdbcType=VARCHAR}
                </if>  
                <if test="REG_START_DATE != null">
                        AND CREATE_DATE  <![CDATA[>=]]> TO_DATE( #{REG_START_DATE, jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS')
                </if>       
                <if test="REG_END_DATE != null">
                        AND CREATE_DATE  <![CDATA[<=]]> TO_DATE( #{REG_END_DATE, jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS')
                </if>
                <if test="GMODEL_NO != null">
                        AND PROJECT_NO IN (  SELECT PS7_PROJECT PROJECT FROM INFODBA.PS7_OSPECSET
                                                                 WHERE PS7_GMODEL =#{GMODEL_NO, jdbcType=VARCHAR} GROUP BY PS7_PROJECT)
                </if>                                                   
    </select>
    <!-- 설계변경 현황 변경 리스트 수정 -->
    <update id="updateRptList" parameterType="java.util.HashMap">
   	UPDATE ECO_RPT_LIST  SET ECO_PUBLISH = #{ECO_PUBLISH, jdbcType=VARCHAR},
                                                USER_ID = #{USER_ID, jdbcType=VARCHAR},
                                                USER_NAME = #{USER_NAME, jdbcType=VARCHAR},
                                                TEAM_NAME = #{TEAM_NAME, jdbcType=VARCHAR},
                                                ECO_NO = #{ECO_NO, jdbcType=VARCHAR},
                                                DESCRIPTION = #{DESCRIPTION, jdbcType=VARCHAR}
                WHERE PUID = #{PUID, jdbcType=VARCHAR}
   </update>
   <!-- 설계변경 현황 변경 리스트 Option Category Count -->
   <select id="getOpCategoryCount" resultType="int" >
    SELECT COUNT(*) FROM ECO_RPT_LIST WHERE OPTION_CATEGORY_PUID= #{OPTION_CATEGORY_PUID, jdbcType=VARCHAR}
   </select>
   <!-- 설계변경 현황 변경 리스트 ROW 삭제 -->
   <delete id="deleteRpListWithPuid" parameterType="java.util.HashMap">
      DELETE FROM ECO_RPT_LIST WHERE PUID = #{PUID, jdbcType=VARCHAR}
   </delete>  
   <!-- 설계변경 현황 변경 검토  Row 삭제 -->
   <delete id="deleteChgReviewWithPuid" parameterType="java.util.HashMap">
      DELETE FROM ECO_RPT_CHG_REVIEW WHERE OPTION_CATEGORY_PUID = #{OPTION_CATEGORY_PUID, jdbcType=VARCHAR}
   </delete>  
   <!-- 설계변경 현황 Option Condition Row 삭제 -->
   <delete id="deleteRptOptCndWithPuid" parameterType="java.util.HashMap">
     DELETE FROM ECO_RPT_OPT_CONDITION WHERE OPTION_CATEGORY_PUID =#{OPTION_CATEGORY_PUID, jdbcType=VARCHAR}
   </delete>    
       <!-- ECO 현황 기준정보 리스트-->
    <select id="getEcoStatusStdList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
         WITH STATUS_LIST
        AS
        (
        SELECT INFO.STAGE_TYPE, INFO.PROJECT_NO, INFO.OSPEC_ID , INFO.CHANGE_DESC
              , INFO.APPLY_DATE, INFO.OSPEC_RECEIPT_DATE 
              , INFO.ECO_COMPLETE_REQ_DATE 
              , (TRUNC(ECO_COMPLETE_REQ_DATE) - TRUNC(INFO.OSPEC_RECEIPT_DATE) +1) CHANGE_PERIOD           
              , COUNT(RLIST.MASTER_PUID) TOTAL_CNT
              , COUNT(CASE WHEN RLIST.ECO_PUBLISH ='필요' THEN RLIST.ECO_PUBLISH END) REQUIRED_ECO_CNT
              , COUNT(CASE WHEN RLIST.ECO_PUBLISH ='필요' AND RLIST.ECO_NO IS NOT NULL THEN
                        CASE WHEN RLIST.UPDATE_DATE <![CDATA[<]]> INFO.ECO_COMPLETE_REQ_DATE + 1  THEN
                            CASE WHEN ECO_REL.ECO_RELEASED_DATE <![CDATA[<]]> INFO.ECO_COMPLETE_REQ_DATE + 1  THEN '기간내 완료' END
                        END
                      END) IN_COMPLETE
              , COUNT(CASE WHEN RLIST.ECO_PUBLISH ='필요' AND RLIST.ECO_NO IS NOT NULL THEN
                        CASE WHEN RLIST.UPDATE_DATE <![CDATA[<]]> INFO.ECO_COMPLETE_REQ_DATE + 1  THEN
                            CASE WHEN ECO_REL.ECO_RELEASED_DATE <![CDATA[>=]]> INFO.ECO_COMPLETE_REQ_DATE + 1  THEN '지연 완료' END
                        END
                      END) DELAY_COMPLETE 
              , COUNT(CASE WHEN RLIST.ECO_PUBLISH ='필요' AND RLIST.ECO_NO IS NOT NULL THEN
                        CASE WHEN RLIST.UPDATE_DATE <![CDATA[>=]]> INFO.ECO_COMPLETE_REQ_DATE + 1   THEN '누락/오류 완료' END
                      END) MISS_ERR_COMPLETE     
              , COUNT(CASE WHEN RLIST.ECO_NO IS NULL THEN
                        CASE WHEN RLIST.ECO_PUBLISH ='필요'THEN
                            CASE WHEN RLIST.UPDATE_DATE <![CDATA[<]]> INFO.ECO_COMPLETE_REQ_DATE + 1    THEN 
                                CASE WHEN SYSDATE <![CDATA[<]]> INFO.ECO_COMPLETE_REQ_DATE + 1    THEN '기간내 진행중' END
                            END    
                        END    
                      END) IN_PROCESSING      
              , COUNT(CASE WHEN RLIST.ECO_NO IS NULL THEN
                        CASE WHEN RLIST.ECO_PUBLISH ='필요'THEN
                            CASE WHEN RLIST.UPDATE_DATE <![CDATA[<]]> INFO.ECO_COMPLETE_REQ_DATE + 1   THEN 
                                CASE WHEN SYSDATE <![CDATA[>=]]> INFO.ECO_COMPLETE_REQ_DATE + 1 THEN '지연 진행중' END
                            END    
                        END    
                      END) DELAY_PROCESSING
              , COUNT(CASE WHEN RLIST.ECO_NO IS NULL THEN
                        CASE WHEN RLIST.ECO_PUBLISH ='필요'THEN
                            CASE WHEN RLIST.UPDATE_DATE <![CDATA[>=]]> INFO.ECO_COMPLETE_REQ_DATE + 1  THEN '누락/오류 진행중' END    
                        END    
                      END) MISS_ERR_PROCESSING          
              , COUNT(CASE WHEN RLIST.ECO_PUBLISH ='사양정리' THEN '사양정리' END) SPEC_ARRANGE
              , INFO.DESCRIPTION
              , INFO.CREATE_DATE        
              , INFO.REGISTER_ID              
              , INFO.MASTER_PUID
              FROM  ECO_RPT_STD_INFO INFO, ECO_RPT_LIST RLIST,
                      (SELECT (WSO.PDATE_RELEASED + 9/24) ECO_RELEASED_DATE, PI.PITEM_ID ITEM_ID 
                            FROM INFODBA.PITEM PI, INFODBA.PITEMREVISION PREV, INFODBA.PWORKSPACEOBJECT WSO
                        WHERE PREV.RITEMS_TAGU = PI.PUID AND PREV.PUID = WSO.PUID AND WSO.POBJECT_TYPE ='S7_ECORevision' ) ECO_REL
            WHERE INFO.MASTER_PUID = RLIST.MASTER_PUID(+) 
                AND ECO_REL.ITEM_ID(+) = RLIST.ECO_NO
                GROUP BY INFO.STAGE_TYPE , INFO.PROJECT_NO, INFO.OSPEC_ID ,INFO.CHANGE_DESC , INFO.OSPEC_RECEIPT_DATE, INFO.APPLY_DATE
                , INFO.ECO_COMPLETE_REQ_DATE , INFO.DESCRIPTION, INFO.MASTER_PUID, INFO.CREATE_DATE , INFO.REGISTER_ID 
                ORDER BY PROJECT_NO, OSPEC_ID
         ),
         STATUS_ALL_LIST
        AS
        (
        SELECT  
           CASE WHEN TOTAL_CNT = 0 THEN '작성중'
           WHEN ECO_COMPLETE_REQ_DATE IS NULL THEN '미관리' 
           ELSE
               CASE WHEN IN_PROCESSING >0 OR DELAY_PROCESSING >0 OR MISS_ERR_PROCESSING >0 THEN
                        CASE WHEN DELAY_PROCESSING >0 OR MISS_ERR_PROCESSING >0 THEN '진행중_2' 
                            ELSE '진행중'
                        END
               ELSE  
                   CASE WHEN DELAY_COMPLETE >0 OR MISS_ERR_COMPLETE >0 THEN '완료_2' 
                        ELSE '완료'
                   END  
               END                     
           END
           STATUS_FLAG
           , STAGE_TYPE, PROJECT_NO, OSPEC_ID , CHANGE_DESC
           , TO_CHAR(APPLY_DATE,'YYYY-MM-DD') APPLY_DATE, TO_CHAR(OSPEC_RECEIPT_DATE,'YYYY-MM-DD') OSPEC_RECEIPT_DATE
           , TO_CHAR(ECO_COMPLETE_REQ_DATE,'YYYY-MM-DD')ECO_COMPLETE_REQ_DATE 
           , TO_CHAR(CHANGE_PERIOD) CHANGE_PERIOD
           , TO_CHAR(CREATE_DATE, 'YYYY-MM-DD') CREATE_DATE_STR , MASTER_PUID , CREATE_DATE, REGISTER_ID 
         FROM STATUS_LIST 
         ORDER BY CREATE_DATE DESC, PROJECT_NO, OSPEC_ID
        )
         SELECT * FROM  STATUS_ALL_LIST
             WHERE 1=1 
                <if test="PROJECT_NO != null">
                        AND PROJECT_NO =#{PROJECT_NO, jdbcType=VARCHAR}
                </if>
                <if test="STAGE_TYPE != null">
                        AND STAGE_TYPE =#{STAGE_TYPE, jdbcType=VARCHAR}
                </if>     
                <if test="STATUS_FLAG != null">
                        AND STATUS_FLAG LIKE #{STATUS_FLAG, jdbcType=VARCHAR}|| <![CDATA['%']]>
                </if>     
                <if test="REG_START_DATE != null">
                        AND CREATE_DATE  <![CDATA[>=]]> TO_DATE( #{REG_START_DATE, jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS')
                </if>       
                <if test="REG_END_DATE != null">
                        AND CREATE_DATE  <![CDATA[<=]]> TO_DATE( #{REG_END_DATE, jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS')
                </if>
                <if test="GMODEL_NO != null">
                        AND PROJECT_NO IN (  SELECT PS7_PROJECT PROJECT FROM INFODBA.PS7_OSPECSET
                                                                 WHERE PS7_GMODEL =#{GMODEL_NO, jdbcType=VARCHAR} GROUP BY PS7_PROJECT)
                </if>                                                   
    </select>
    <!-- Project 의 GMODEL 코드를 가져옴-->
    <select id="getGmodelWithProject" resultType="string">
      SELECT PS7_GMODEL G_MODEL  FROM INFODBA.PS7_OSPECSET A
        WHERE A.PS7_PROJECT =#{PROJECT_NO, jdbcType=VARCHAR}
    </select> 
   <!-- 설계변경 현황 기준정보 -->
   <update id="updateRptStdInfo" parameterType="java.util.HashMap">
     UPDATE ECO_RPT_STD_INFO  SET PROJECT_NO = #{PROJECT_NO, jdbcType=VARCHAR},
                                                     OSPEC_ID = #{OSPEC_ID, jdbcType=VARCHAR},
                                                     STAGE_TYPE = #{STAGE_TYPE, jdbcType=VARCHAR},
                                                     CHANGE_DESC = #{CHANGE_DESC, jdbcType=VARCHAR},
                                                     APPLY_DATE = TO_DATE(#{APPLY_DATE, jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS'),
                                                     OSPEC_RECEIPT_DATE = TO_DATE(#{OSPEC_RECEIPT_DATE, jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS'),
                                                     ECO_COMPLETE_REQ_DATE = TO_DATE(#{ECO_COMPLETE_REQ_DATE, jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS')
           WHERE MASTER_PUID = #{MASTER_PUID, jdbcType=VARCHAR}
   </update>
   <!-- OSPEC 하위 Revision 리스트 -->
   <select id="getOspecRevList" resultType="java.util.HashMap">
   SELECT ITEM.PITEM_ID ||'-' || REV.PITEM_REVISION_ID  OSI_NO, REV.PUID REV_PUID, OITEM.PUID ITEM_PUID
    FROM INFODBA.PS7_OSPECSET OITEM, INFODBA.PITEM ITEM, INFODBA.PITEMREVISION REV
    WHERE OITEM.PUID = ITEM.PUID
        AND ITEM.PITEM_ID = #{OSPEC_ID, jdbcType=VARCHAR}
        AND ITEM.PUID = REV.RITEMS_TAGU
        ORDER BY REV.PITEM_REVISION_ID
   </select>
   <!-- Product에 해당하는 EPL Puid를 가져옴  -->
   <select id="getEPLJobPuid" resultType="string">   
     WITH LATEST_REV AS
     (SELECT PREV.PUID 
        FROM INFODBA.PITEM PI, INFODBA.PITEMREVISION PREV, INFODBA.PPOM_APPLICATION_OBJECT PAO
             WHERE  PREV.PUID = PAO.PUID
                AND PREV.RITEMS_TAGU = PI.PUID    
                AND PI.PITEM_ID = #{PROJECT_NO, jdbcType=VARCHAR}
                ORDER BY TO_CHAR(PAO.PCREATION_DATE,'YYYY-MM-DD HH24:MI:SS') DESC)
    , PRODUCT_INFROM AS
    (            
    SELECT PJ.PS7_BASE_PRJ, PI.PITEM_ID PRODUCT_ID
        FROM LATEST_REV, INFODBA.PS7_PROJECTREVISION PJ,
            INFODBA.PWORKSPACEOBJECT WO, INFODBA.PITEMREVISION REV, INFODBA.PITEM PI, INFODBA.PS7_PRODUCTREVISION PRD
            WHERE LATEST_REV.PUID = PJ.PUID
                    AND PJ.PS7_BASE_PRJ = REV.PS7_PROJECT_CODE
                    AND REV.PUID = PRD.PUID
                    AND REV.RITEMS_TAGU = PI.PUID
                    AND WO.PUID = PI.PUID
                    AND WO.POBJECT_TYPE = 'S7_Product'
                    AND ROWNUM = 1
    )        
    SELECT MAX(JOB_PUID) TARGET_JOB FROM HBOM_TC_EPL_JOB J, PRODUCT_INFROM PROD  
        WHERE J.WHAT_EPL_JOB = 'V'
            AND J.PRODUCT_ID =PROD.PRODUCT_ID
  </select>
  <!-- 설계변경현황 등록 대상 변경정보 리스트 -->
  <select id="getChangeTargetEPLList" resultType="java.util.HashMap">
  SELECT EPL.FUNC_NO, EPL.PART_NAME, EPL.OPTIONS, EPL.U_SYSTEM_CODE, EPL.U_OWNER, EPL.U_OWNER_ID, EPL.U_TEAM
      FROM HBOM_TC_EPL EPL 
    WHERE EPL.JOB_PUID = #{EPL_JOB_PUID, jdbcType=VARCHAR} AND
         (
         <foreach item="item" index="index"  collection="TARGET_OPTIONS" separator="OR">
            REGEXP_LIKE (EPL.OPTIONS,#{item, jdbcType=VARCHAR})
         </foreach>
         )
         <if test="EXCLUDE_OPTIONS != null">
            AND NOT REGEXP_LIKE (EPL.OPTIONS,#{EXCLUDE_OPTIONS, jdbcType=VARCHAR})
         </if>
         <if test="INCLUDE_OPTIONS != null">
            AND REGEXP_LIKE (EPL.OPTIONS,#{INCLUDE_OPTIONS, jdbcType=VARCHAR})
         </if>         
    GROUP BY EPL.FUNC_NO, EPL.PART_NAME, EPL.OPTIONS, EPL.U_SYSTEM_CODE, EPL.U_OWNER, EPL.U_OWNER_ID, EPL.U_TEAM
    ORDER BY EPL.FUNC_NO, EPL.PART_NAME
  </select>
  <!-- 설계변경현황 EPL 리스트 -->
  <select id="getAllChangeTargetEPLList" resultType="java.util.HashMap">
  SELECT EPL.FUNC_NO, EPL.PART_NAME, EPL.OPTIONS, EPL.U_SYSTEM_CODE, EPL.U_OWNER,  EPL.U_TEAM
      FROM HBOM_TC_EPL EPL 
    WHERE EPL.JOB_PUID = #{EPL_JOB_PUID, jdbcType=VARCHAR} AND  
         (
         <foreach item="item" index="index"  collection="TARGET_OPTIONS" separator="OR">
            REGEXP_LIKE (EPL.OPTIONS,#{item, jdbcType=VARCHAR})
         </foreach>
         )
         <if test="EXCLUDE_OPTIONS != null">
            AND NOT REGEXP_LIKE (EPL.OPTIONS,#{EXCLUDE_OPTIONS, jdbcType=VARCHAR})
         </if>
         <if test="INCLUDE_OPTIONS != null">
            AND REGEXP_LIKE (EPL.OPTIONS,#{INCLUDE_OPTIONS, jdbcType=VARCHAR})
         </if>             
    ORDER BY EPL.FUNC_NO, EPL.PART_NAME
  </select>  
  <!-- 설계변경현황 추가검토 옵션 생성 -->
   <insert id="insertRptOptCondition">
   INSERT INTO ECO_RPT_OPT_CONDITION(OPTION_CATEGORY_PUID,
                                                                  MASTER_PUID,
                                                                  OPTION_CODE,
                                                                  OPTION_CONDITION
                                                                 )
                                                    VALUES(#{OPTION_CATEGORY_PUID, jdbcType=VARCHAR},
                                                                 #{MASTER_PUID, jdbcType=VARCHAR},
                                                                 #{OPTION_CODE, jdbcType=VARCHAR},
                                                                 #{OPTION_CONDITION, jdbcType=VARCHAR}
                                                                )
   </insert>   
   <!-- ECO 현황 변경검토 Category 정보 리스트-->
   <select id="getRptChgReviewCategory" parameterType="java.util.HashMap" resultType="java.util.HashMap"> 
    SELECT R.OPTION_CATEGORY, R.REVIEW_CONTENTS, C.OPTION_CODE, C.OPTION_CONDITION 
        FROM ECO_RPT_CHG_REVIEW R , ECO_RPT_OPT_CONDITION C
        WHERE R.MASTER_PUID =#{MASTER_PUID, jdbcType=VARCHAR}
              AND R.OPTION_CATEGORY IS NOT NULL 
              AND R.OPTION_CATEGORY_PUID = C.OPTION_CATEGORY_PUID(+)
              AND R.MASTER_PUID = C.MASTER_PUID(+)
            ORDER BY OPTION_CATEGORY          
   </select>
   <!-- ECO 현황 추가검토 옵션 리스트-->
   <select id="getRptOptCondition" parameterType="java.util.HashMap" resultType="java.util.HashMap"> 
    SELECT * FROM ECO_RPT_OPT_CONDITION C WHERE C.MASTER_PUID =#{MASTER_PUID, jdbcType=VARCHAR}
      ORDER BY C.OPTION_CODE
   </select>  
   <!-- 설계변경 현황 추가 검토옵션 정보 기준정보 MASTER_PUID로 삭제  -->
   <delete id="deleteRptOptCondition" parameterType="java.util.HashMap">
      DELETE ECO_RPT_OPT_CONDITION WHERE MASTER_PUID = #{MASTER_PUID, jdbcType=VARCHAR}
   </delete>
   <!-- 설계변경 현황 변경 검토 Count -->
   <select id="getRptReviewCount" resultType="int" >
       SELECT COUNT(*) CNT FROM ECO_RPT_CHG_REVIEW R WHERE R.MASTER_PUID =#{MASTER_PUID, jdbcType=VARCHAR}
   </select>
   
   <!-- 설계변경 현황 기준정보 With Master PUID  -->
   <select id="getRptStdInformWithPuid" parameterType="java.util.HashMap" resultType="java.util.HashMap">
       SELECT S.MASTER_PUID ,S.STAGE_TYPE , S.PROJECT_NO, S.OSPEC_ID, S.CHANGE_DESC , TO_CHAR(S.APPLY_DATE,'YYYY-MM-DD') APPLY_DATE
              ,TO_CHAR(S.OSPEC_RECEIPT_DATE,'YYYY-MM-DD') OSPEC_RECEIPT_DATE  , TO_CHAR(S.ECO_COMPLETE_REQ_DATE,'YYYY-MM-DD')ECO_COMPLETE_REQ_DATE, S.REGISTER_ID 
        FROM ECO_RPT_STD_INFO S
        WHERE S.MASTER_PUID IN
         <foreach item="item" index="index" collection="MASTER_PUID" open="(" separator="," close=")" >
                   #{item, jdbcType=VARCHAR}
        </foreach>
   </select>
  <!-- Function EPL 등록 -->
   <insert id="insertFncEplCheck">
   INSERT INTO FNC_EPL_CHECK(FUNCTION_NO,
                                                  PROD_NO,
                                                  PROD_NAME,
                                                  ECO_TYPE,
                                                  APPLY_ECO_NO,
                                                  ADD_ECO_PUBLISH,
                                                  DESCRIPTION,
                                                  ATTACH_FILE_PUID,
                                                  REGISTER_ID,
                                                  BASE_DATE
                                                  )
                                                    VALUES(#{FUNCTION_NO, jdbcType=VARCHAR},
                                                                 #{PROD_NO, jdbcType=VARCHAR},
                                                                 #{PROD_NAME, jdbcType=VARCHAR},
                                                                 #{ECO_TYPE, jdbcType=VARCHAR},
                                                                 #{APPLY_ECO_NO, jdbcType=VARCHAR},
                                                                 #{ADD_ECO_PUBLISH, jdbcType=VARCHAR},
                                                                 #{DESCRIPTION, jdbcType=VARCHAR},
                                                                 #{ATTACH_FILE_PUID, jdbcType=VARCHAR}, 
                                                                 #{REGISTER_ID, jdbcType=VARCHAR}, 
                                                                 TO_DATE(#{BASE_DATE, jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS')                                                                                                                                                                                     
                                                                )
   </insert>
   <!-- Function EPL 리스트 조회 -->
   <select id="getFncEplCheckList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
    WITH FNC_CHECK AS 
    (
        SELECT FC.*, MAX(FC.BASE_DATE) OVER( PARTITION BY FC.FUNCTION_NO, FC.PROD_NO) MAX_DATE
            , ROW_NUMBER() OVER( PARTITION BY FC.FUNCTION_NO, FC.PROD_NO ORDER BY FC.BASE_DATE DESC,FC.CREATE_DATE DESC) RN
            , TO_CHAR(FC.BASE_DATE,'YYYY-MM-DD') BASE_DATE_STR, TO_CHAR(FC.CREATE_DATE,'YYYY-MM-DD') CREATE_DATE_STR 
            , PROD_NO || ' ('||PROD_NAME||')' PROD_DP_NAME
        FROM FNC_EPL_CHECK FC
            ORDER BY MAX_DATE DESC, FC.FUNCTION_NO, FC.PROD_NO , FC.BASE_DATE DESC, FC.CREATE_DATE DESC
    )
    SELECT * FROM FNC_CHECK F   
        WHERE 1=1
            <if test="LATEST_CHECKED != null">
                  AND RN = 1
            </if>   
            <if test="PROD_NO != null">
                  AND F.PROD_NO LIKE #{PROD_NO, jdbcType=VARCHAR}
            </if> 
            <if test="FUNCTION_NO != null">
                  AND F.FUNCTION_NO LIKE #{FUNCTION_NO, jdbcType=VARCHAR}|| <![CDATA['%']]>
            </if> 
            <if test="APPLY_ECO_NO != null">
                  AND F.APPLY_ECO_NO LIKE #{APPLY_ECO_NO, jdbcType=VARCHAR}
            </if>  
            <if test="ADD_ECO_PUBLISH != null">
                  AND F.ADD_ECO_PUBLISH LIKE #{ADD_ECO_PUBLISH, jdbcType=VARCHAR}
            </if>                          
   </select>   
   <delete id="deleteFncEpl" parameterType="java.util.HashMap">
      DELETE FNC_EPL_CHECK WHERE PUID = #{PUID, jdbcType=VARCHAR}
   </delete>   
   <update id="updateFncEplCheck" parameterType="java.util.HashMap">
       UPDATE FNC_EPL_CHECK  SET FUNCTION_NO = #{FUNCTION_NO, jdbcType=VARCHAR},
                  PROD_NO = #{PROD_NO, jdbcType=VARCHAR},
                  ECO_TYPE = #{ECO_TYPE, jdbcType=VARCHAR},
                  APPLY_ECO_NO = #{APPLY_ECO_NO, jdbcType=VARCHAR},
                  ADD_ECO_PUBLISH = #{ADD_ECO_PUBLISH, jdbcType=VARCHAR},
                  DESCRIPTION = #{DESCRIPTION, jdbcType=VARCHAR},
                  ATTACH_FILE_PUID = #{ATTACH_FILE_PUID, jdbcType=VARCHAR}, 
                  BASE_DATE = TO_DATE(#{BASE_DATE, jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS')
            WHERE  PUID = #{PUID, jdbcType=VARCHAR}   
   </update>
   <!-- Function EPL 리스트 현황 -->
   <select id="getFncEplCheckStatusList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
       WITH FNC_CHECK AS 
      (
          SELECT FC.*
              ,ROW_NUMBER() OVER( PARTITION BY FC.FUNCTION_NO, FC.PROD_NO ORDER BY FC.CREATE_DATE DESC) RN
          FROM FNC_EPL_CHECK FC
          WHERE 1=1
              <if test="PROD_NO != null">
                    AND PROD_NO = #{PROD_NO, jdbcType=VARCHAR}
              </if>
              <if test="REG_START_DATE != null">
                    AND CREATE_DATE  <![CDATA[>=]]> TO_DATE( #{REG_START_DATE, jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS')
              </if>       
              <if test="REG_END_DATE != null">
                    AND CREATE_DATE  <![CDATA[<=]]> TO_DATE( #{REG_END_DATE, jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS')
              </if>
      )
      SELECT PROD_NO, PROD_NAME 
          ,COUNT(PROD_NO) REG_CNT
          ,COUNT(CASE WHEN ADD_ECO_PUBLISH ='필요' THEN '필요' END) NEED_CNT
          ,COUNT(CASE WHEN ADD_ECO_PUBLISH ='사양정리' THEN '사앙정리' END) SPEC_CNT
       FROM FNC_CHECK F
       WHERE 1=1
          AND RN = 1
          GROUP BY PROD_NO, PROD_NAME
   </select>
   
   <!--  ECO ECIECR I/F 기능을 위해 추가 -->
   <select id="searchEciNo" parameterType="java.util.HashMap" resultType="java.lang.String">
        SELECT APRVNO AS ECINO                 
        FROM IF_ECI_ECR                            
        WHERE APRVNO = #{ECINO}
    </select>
    <select id="searchEcrNo" parameterType="java.util.HashMap" resultType="java.lang.String">
        SELECT DOCUNO AS ECRNO                 
        FROM IF_ECI_ECR                            
        WHERE DOCUNO = #{ECRNO}
    </select>
    <update id="updateEci" parameterType="java.util.HashMap">
    <![CDATA[
        UPDATE IF_ECI_ECR A
           SET A.ECONO = DECODE(A.ECONO, NULL,#{ECONO, jdbcType=VARCHAR}, A.ECONO || ',' || #{ECONO, jdbcType=VARCHAR})
             , A.CLS2 = 'Y'
             , A.STATUS = DECODE(A.STATUS, '07', A.STATUS, '07')
             , A.UDATE = SYSDATE
             , A.ECONO_UPD = DECODE(A.ECONO, NULL, #{ECONO, jdbcType=VARCHAR}, A.ECONO || ',' || #{ECONO, jdbcType=VARCHAR})
             , A.CLS2_UPD = 'Y'
             , A.STATUS_UPD = DECODE(A.STATUS, '07', A.STATUS, '07')
             , A.UDATE_UPD = SYSDATE
             , A.EAI_UPD_FLAG = 'R'
         WHERE A.APRVNO = #{ECINO, jdbcType=VARCHAR}
    ]]>
    </update>
    <update id="updateEcr" parameterType="java.util.HashMap">
    <![CDATA[
        UPDATE IF_ECI_ECR A
           SET A.ECONO = DECODE(A.ECONO, NULL,#{ECONO, jdbcType=VARCHAR}, A.ECONO || ',' || #{ECONO, jdbcType=VARCHAR})
             , A.CLS2 = 'Y'
             , A.STATUS = DECODE(A.STATUS, '07', A.STATUS, '07')
             , A.UDATE = SYSDATE
             , A.ECONO_UPD = DECODE(A.ECONO, NULL, #{ECONO, jdbcType=VARCHAR}, A.ECONO || ',' || #{ECONO, jdbcType=VARCHAR})
             , A.CLS2_UPD = 'Y'
             , A.STATUS_UPD = DECODE(A.STATUS, '07', A.STATUS, '07')
             , A.UDATE_UPD = SYSDATE
             , A.EAI_UPD_FLAG = 'R'
         WHERE A.DOCUNO = #{ECRNO, jdbcType=VARCHAR}
    ]]>
    </update>
    
    <select id="datasetCheck" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        select wo.pobject_name datasetName, fl.poriginal_file_name originName
             , ivol.pwnt_path_name || '\' ||fl.psd_path_name || '\' ||fl.pfile_name filePath
             , wj.pobject_name pname
             , wo.puid puid
        from infodba.pattachments att
           , infodba.pworkspaceobject wo
           , infodba.pref_list_0 rl
           , infodba.pimanfile fl
           , infodba.pimanvolume ivol
           , infodba.pepmtask so
           , infodba.pepmjob jo
           , infodba.pworkspaceobject wj
        where so.puid = #{PUID, jdbcType=VARCHAR}
        and so.rparent_processu = jo.puid
        and jo.puid = wj.puid
        and att.puid = jo.rroot_tasku
        and att.pvalu_0 = wo.puid
        and wo.pobject_type in ('CATProduct','CATPart')
        and wo.pactive_seq = 1
        and wo.puid = rl.puid
        and rl.pvalu_0 = fl.puid
        and ivol.puid = fl.rvolume_tagu
    </select>
    
    <select id="getYear" resultType="String"> 
		SELECT TO_CHAR(IRW.PDATE_RELEASED + 9/24, 'YYYY') AS YEAR  
	        FROM INFODBA.PITEM I                               
	        , INFODBA.PITEMREVISION IR                         
	        , INFODBA.PWORKSPACEOBJECT IRW                     
	        , INFODBA.PS7_ECOREVISION ECO                      
	        WHERE ECO.PS7_ECO_MATURITY = 'Completed'           
	        AND ECO.PUID = IR.PUID                             
	        AND IRW.PUID = IR.PUID                             
	        AND IR.RITEMS_TAGU = I.PUID                        
	        GROUP BY TO_CHAR(IRW.PDATE_RELEASED + 9/24, 'YYYY')
	      ORDER BY YEAR DESC         
   	</select>  
   
</mapper>