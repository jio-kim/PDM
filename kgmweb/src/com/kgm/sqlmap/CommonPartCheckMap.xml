<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="com.kgm.mapper.CommonPartCheckMapper">
    
    <resultMap type="com.kgm.dto.TCPartModel" id="TCPartModel">
        <result column="ecoNo" property="ecoModel.ecoNo"/>
        <result column="ecoStatus" property="ecoModel.ecoStatus"/>
        <result column="partNo" property="partNo"/>
        <result column="partName" property="partName"/>
    </resultMap>  
    
    
    <resultMap type="com.kgm.dto.TCBomLineData" id="TCBomLineData">
        <result column="eco_no" property="eco.ecoNo"/>
        <result column="status" property="eco.ecoStatus"/>
        <result column="part_name" property="child.partName"/>
        <result column="function_no" property="functionNo"/>
        <result column="parent_part_no" property="parent.partNo"/>
        <result column="part_no" property="child.partNo"/>
        <result column="seq" property="seq"/>
        <result column="bom_level" property="bomLevel"/>
        <result column="supply_mode" property="supplyMode"/>
        <result column="create_date" property="createDate"/>
    </resultMap>
    
    <resultMap type="com.kgm.dto.ExcludeFromCommonPartInEcoData" id="ExcludeFromCommonPartInEcoData">
        <result column="ex_id" property="id"/>
        <result column="part_no" property="partNo"/>
        <result column="part_name" property="partName"/>
        <result column="remarks" property="remarks"/>
        <result column="create_date" property="createDate"/>
    </resultMap>
    
    <sql id="ecoList">
        select i.pitem_id as ecoNo, 
               ecr.ps7_eco_maturity as ecoStatus, 
               pg.pname as owningTeam, 
               pu.puser_name as owningUser, 
               ecwo.pobject_desc as ecoDesc
        from infodba.ps7_ecorevision ecr
           , infodba.pitem i
           , infodba.pitemrevision ir
           , infodba.pworkspaceobject ecwo
           , INFODBA.PPOM_APPLICATION_OBJECT pao
           , INFODBA.PPOM_GROUP pg
           , INFODBA.PPOM_user pu
        where i.puid = ir.RITEMS_TAGU
        and ecr.puid = ir.puid
        and ecwo.puid = ecr.puid
        and ecwo.PACTIVE_SEQ = '1'
        and pao.puid = ecr.puid
        and pg.puid = pao.ROWNING_GROUPU
        and pu.puid = pao.ROWNING_USERU
        and (ecr.ps7_eco_maturity != 'Completed' or 
            (ecwo.PDATE_RELEASED >= to_date(to_char(sysdate,'yyyymmdd') || ' 14:59:59','YYYYMMdd HH24:MI:SS') - 2 AND  
             ecwo.PDATE_RELEASED <![CDATA[<=]]> to_date(to_char(sysdate,'yyyymmdd')  || ' 14:59:59','YYYYMMdd HH24:MI:SS') -1 ) )
        and pu.puser_name != 'infodba0'
        order by i.pitem_id
    </sql>
    
    <select id="getEcoList" parameterType="java.util.HashMap"  resultType="com.kgm.dto.TCEcoModel" >
        <include refid="ecoList"></include>
    </select>
    
    <select id="getOldPartListWithN1" parameterType="java.util.HashMap"   resultMap="TCPartModel" >
        WITH check_eco_list AS (
           <include refid="ecoList"></include>
         )
         SELECT DISTINCT check_eco.ecoNo as ecoNo
                ,check_eco.ecoStatus as ecoStatus
                ,eco_list.old_part_no as partNo
                ,wo.pobject_name as partName
           FROM eco_bom_list eco_list, check_eco_list check_eco, infodba.pitem pi, infodba.pitemrevision pir, infodba.pworkspaceobject wo
          WHERE eco_list.eco_no = check_eco.ecoNo
            AND eco_list.old_part_no = pi.pitem_id
            AND pi.puid = pir.ritems_tagu
            AND pir.puid = wo.puid
            AND wo.pactive_seq = 1
            AND pir.pitem_revision_id = eco_list.old_part_rev
            AND eco_list.ct = 'N1'
            AND eco_list.new_project  <![CDATA[<>]]>  'S201'
            AND UPPER ( wo.pobject_name ) NOT IN  ( SELECT UPPER(part_name) FROM COMMON_PART_CHECK_EXCLUDE_DATA WHERE part_name IS NOT NULL ) 
            AND UPPER ( eco_list.old_part_no ) NOT IN  ( SELECT UPPER ( part_no ) FROM COMMON_PART_CHECK_EXCLUDE_DATA WHERE part_no IS NOT NULL )
            AND pir.ps7_part_type <![CDATA[<>]]> 'M' 
         order by check_eco.ecoNo, eco_list.old_part_no    
    </select>
    
    <select id="getCommonPartCheckReport" parameterType="java.util.HashMap"   resultMap="TCBomLineData" >
        SELECT * 
          FROM COMMON_PART_ECO_CHECK_DATA
         WHERE to_char ( create_date , 'YYYY-MM-DD' ) <![CDATA[>=]]> #{FROM, jdbcType=DATE} 
           AND to_char ( create_date , 'YYYY-MM-DD' ) <![CDATA[<=]]> #{TO, jdbcType=DATE}   
        order by eco_no , part_no, parent_part_no   
    </select>
    
    <select id="getExcludePartData" parameterType="java.util.HashMap"   resultMap="ExcludeFromCommonPartInEcoData" >
        select ex_id, part_no, part_name, remarks, create_date
          from COMMON_PART_CHECK_EXCLUDE_DATA
    </select>
    
    <update id="updateExcludePartData" parameterType="com.kgm.dto.ExcludeFromCommonPartInEcoData">
        update COMMON_PART_CHECK_EXCLUDE_DATA 
           set part_no = #{partNo, jdbcType=VARCHAR},
               part_name = #{partName, jdbcType=VARCHAR},
               remarks = #{remarks, jdbcType=VARCHAR}
         where ex_id = #{id} 
    </update>
    <insert id="insertExcludePartData" parameterType="com.kgm.dto.ExcludeFromCommonPartInEcoData">
        insert into COMMON_PART_CHECK_EXCLUDE_DATA 
                    ( ex_id, part_no, part_name, remarks )
        SELECT NVL(MAX( ex_id ), 0) + 1,#{partNo, jdbcType=VARCHAR}, #{partName, jdbcType=VARCHAR},  #{remarks, jdbcType=VARCHAR}  FROM COMMON_PART_CHECK_EXCLUDE_DATA                 
         
    </insert>
    
    <delete id="deleteExcludePartData" parameterType="com.kgm.dto.ExcludeFromCommonPartInEcoData">
        delete COMMON_PART_CHECK_EXCLUDE_DATA 
         where ex_id = #{id} 
    </delete>
    
    <update id="createReport" statementType="CALLABLE">
      {call P_CREATE_N1_ECO_PART_REPORT(0, 'N')}
    </update>
    
    <!-- [SR180822][csh] Product 하위 Functon / Function 하위 FMP List 가져오기(BOM 정전개 latest Released) -->
    <select id="getFunctionList" parameterType="java.lang.String" resultType="java.util.HashMap" >
         select /*+RULE*/ distinct ci.pitem_id id
           , cirw.pobject_name name
           , cir.pitem_revision_id rev
        from infodba.pitem pi
           , infodba.pitemrevision pir
           , infodba.pworkspaceobject pirw
           , infodba.pstructure_revisions psr
           , infodba.ppsbomviewrevision pbvr
           , infodba.ppsbomview pbv
           , infodba.ppsviewtype vt
           , infodba.ppsoccurrence occ
           , infodba.pitem ci
           , infodba.pworkspaceobject cirw
           , infodba.pitemrevision cir
        where pi.puid = pir.ritems_tagu
        and pirw.puid = pir.puid
        and pirw.PACTIVE_SEQ = 1 
        and pir.puid = psr.puid
        and psr.pvalu_0 = pbvr.puid
        and pbvr.RBOM_VIEWU =pbv.PUID
        and pbv.RVIEW_TYPEU = vt.PUID
        and vt.PNAME = 'view'
        and pbvr.puid = occ.rparent_bvru
        and occ.rchild_itemu = ci.puid
        and cirw.PACTIVE_SEQ = 1 
        and cirw.puid = cir.puid
        and ci.puid = cir.ritems_tagu
        and cirw.POBJECT_TYPE = #{TYPE, jdbcType=VARCHAR}
        and cir.pitem_revision_id = (select max(ir.pitem_revision_id) from infodba.pitemrevision ir, infodba.pworkspaceobject w where ci.puid = ir.ritems_tagu and ir.puid = w.puid and w.pdate_released is not null)
        and pir.pitem_revision_id = (select max(ir.pitem_revision_id) from infodba.pitemrevision ir, infodba.pworkspaceobject w where pi.puid = ir.ritems_tagu and ir.puid = w.puid and w.pdate_released is not null)
        start with pi.pitem_id = #{ID, jdbcType=VARCHAR}
        and pir.pitem_revision_id = #{REV, jdbcType=VARCHAR}
        connect by prior ci.pitem_id = pi.pitem_id
        and prior cir.pitem_revision_id = pir.pitem_revision_id
        and prior cir.pitem_revision_id = (select max(ir.pitem_revision_id) from infodba.pitemrevision ir, infodba.pworkspaceobject w where ci.puid = ir.ritems_tagu and ir.puid = w.puid and w.pdate_released is not null)
        and prior pir.pitem_revision_id = (select max(ir.pitem_revision_id) from infodba.pitemrevision ir, infodba.pworkspaceobject w where pi.puid = ir.ritems_tagu and ir.puid = w.puid and w.pdate_released is not null)
        order siblings by ci.pitem_id
    </select>
    
    <!-- [SR180822][csh] Function / FMP 하위 Child List 가져오기(BOM 정전개 latest Released) -->
    <select id="getChildList" parameterType="java.lang.String" resultType="java.util.HashMap" >
           with bomlist as
            (
            select /*+RULE*/ level lev
                 , pi.pitem_id pid 
                 , pir.pitem_revision_id prev
                 , occ.pseq_no seq
                 , ci.pitem_id cid
                 , cir.pitem_revision_id crev
                 , cirw.pobject_name cname
                 , cirw.pobject_type ctype
                 , occ.pqty_value qty
                 , pao.rowning_groupu grp
                 , pao.rowning_useru ownr
                 , rownum rn
                 , GET_BOM_NOTE_TEXT(occ.RNOTES_REFU, 'S7_SUPPLY_MODE') smode
            from infodba.pitem pi
               , infodba.pitemrevision pir
               , infodba.pworkspaceobject pirw
               , infodba.pstructure_revisions psr
               , infodba.ppsbomviewrevision pbvr
               , infodba.ppsbomview pbv
               , infodba.ppsviewtype vt
               , infodba.ppsoccurrence occ
               , infodba.pitem ci
               , infodba.pworkspaceobject cirw
               , infodba.pitemrevision cir
               , infodba.ppom_application_object pao
            where pi.puid = pir.ritems_tagu
            and pbvr.puid = pao.puid
            and pirw.puid = pir.puid
            and pirw.PACTIVE_SEQ = 1 
            and pir.puid = psr.puid
            and psr.pvalu_0 = pbvr.puid
            and pbvr.RBOM_VIEWU =pbv.PUID
            and pbv.RVIEW_TYPEU = vt.PUID
            and vt.PNAME = 'view'
            and pbvr.puid = occ.rparent_bvru
            and occ.rchild_itemu = ci.puid
            and cirw.PACTIVE_SEQ = 1 
            and cirw.puid = cir.puid
            and ci.puid = cir.ritems_tagu
            and cir.pitem_revision_id = (select max(ir.pitem_revision_id) from infodba.pitemrevision ir, infodba.pworkspaceobject w where ci.puid = ir.ritems_tagu and ir.puid = w.puid and w.pdate_released is not null)
            and pir.pitem_revision_id = (select max(ir.pitem_revision_id) from infodba.pitemrevision ir, infodba.pworkspaceobject w where pi.puid = ir.ritems_tagu and ir.puid = w.puid and w.pdate_released is not null)
            start with pi.pitem_id = #{ID, jdbcType=VARCHAR}
            and pir.pitem_revision_id = #{REV, jdbcType=VARCHAR}
            connect by prior ci.pitem_id = pi.pitem_id
            and prior cir.pitem_revision_id = pir.pitem_revision_id
            and cir.pitem_revision_id = (select max(ir.pitem_revision_id) from infodba.pitemrevision ir, infodba.pworkspaceobject w where ci.puid = ir.ritems_tagu and ir.puid = w.puid and w.pdate_released is not null)
            and pir.pitem_revision_id = (select max(ir.pitem_revision_id) from infodba.pitemrevision ir, infodba.pworkspaceobject w where pi.puid = ir.ritems_tagu and ir.puid = w.puid and w.pdate_released is not null)
            order siblings by occ.pseq_no
            )
            select b.lev, b.pid, b.prev, max(b.seq) maxseq, b.cid, b.crev, b.cname, b.ctype, sum(b.qty), max(b.rn), b.smode
              , (select pname
                 from infodba.ppom_group where puid = b.grp) grp
              , (select puser_name
                 from infodba.ppom_user where puid = b.ownr) ownr
              --20201217 CF-1708 seho Weight 관리 불러오기
              , n.weight_management weightmngt
              , n.nmcd nmcd
              , to_char(n.up_date, 'yyyy-mm-dd hh24:mi:ss') udate
              , n.project_code pcode
              , n.new_team nteam
            from bomlist b
               , nmcd_mgmt n
            where ctype != 'S7_FunctionMastRevision'
            and n.product_number(+) = #{PRD_NO, jdbcType=VARCHAR} 
            and n.function_number(+) = #{FUNC_NO, jdbcType=VARCHAR} 
            and n.parent_number(+) = b.pid 
            and n.child_number(+) = b.cid
            --20201217 CF-1708 seho Weight 관리 column 추가-weight_management
            group by b.lev, b.pid, b.prev, b.cid, b.crev, b.cname, b.ctype, b.grp, b.ownr, b.smode, n.nmcd, n.weight_management, to_char(n.up_date, 'yyyy-mm-dd hh24:mi:ss'), n.project_code, n.new_team
            order by max(rn)
    </select>
    
    <update id="updateNmcd" parameterType="java.lang.String">
    --20201217 CF-1708 seho Weight 관리 column 추가-weight_management
        update nmcd_mgmt set nmcd = #{NMCD, jdbcType=VARCHAR}, project_code = #{PCODE, jdbcType=VARCHAR}, new_team = #{NTEAM, jdbcType=VARCHAR}, weight_management = #{WEIGHTMNGT, jdbcType=VARCHAR}, up_date = sysdate
        where product_number = #{PRDNO, jdbcType=VARCHAR} 
        and function_number = #{FUNCNO, jdbcType=VARCHAR}
        and parent_number = #{PARENTNO, jdbcType=VARCHAR} 
        and child_number = #{PARTNO, jdbcType=VARCHAR}
    </update>
    
    <insert id="insertNmcd" parameterType="java.lang.String">
    --20201217 CF-1708 seho Weight 관리 column 추가-weight_management
        insert into nmcd_mgmt (product_number, function_number, parent_number, child_number, nmcd, project_code, new_team, weight_management)
        values (#{PRDNO, jdbcType=VARCHAR},#{FUNCNO, jdbcType=VARCHAR},#{PARENTNO, jdbcType=VARCHAR},#{PARTNO, jdbcType=VARCHAR},#{NMCD, jdbcType=VARCHAR},#{PCODE, jdbcType=VARCHAR},#{NTEAM, jdbcType=VARCHAR},#{WEIGHTMNGT, jdbcType=VARCHAR})
    </insert>
    
     <delete id="deleteNmcd" parameterType="java.lang.String">
        delete nmcd_mgmt
        where product_number = #{PRDNO, jdbcType=VARCHAR} 
        and function_number = #{FUNCNO, jdbcType=VARCHAR}
        and parent_number = #{PARENTNO, jdbcType=VARCHAR} 
        and child_number = #{PARTNO, jdbcType=VARCHAR}
    </delete>
    
    <insert id="mergeNmcd" parameterType="java.lang.String">
    --20201217 CF-1708 seho Weight 관리 column 추가-weight_management
        merge into nmcd_mgmt 
        using dual
        on (product_number = #{PRDNO, jdbcType=VARCHAR} and function_number = #{FUNCNO, jdbcType=VARCHAR} and parent_number = #{PARENTNO, jdbcType=VARCHAR} and child_number = #{PARTNO, jdbcType=VARCHAR})
        when matched then
        update set weight_management = #{WEIGHTMNGT, jdbcType=VARCHAR}, nmcd=#{NMCD, jdbcType=VARCHAR}, project_code = #{PCODE, jdbcType=VARCHAR}, new_team = #{NTEAM, jdbcType=VARCHAR}, up_date = sysdate
        when not matched then
        insert (product_number, function_number, parent_number, child_number, weight_management, nmcd, project_code, new_team)
        values(#{PRDNO, jdbcType=VARCHAR}, #{FUNCNO, jdbcType=VARCHAR}, #{PARENTNO, jdbcType=VARCHAR}, #{PARTNO, jdbcType=VARCHAR}, #{WEIGHTMNGT, jdbcType=VARCHAR}, #{NMCD, jdbcType=VARCHAR}, #{PCODE, jdbcType=VARCHAR}, #{NTEAM, jdbcType=VARCHAR})
  </insert> 
  
  <select id="getEplList" parameterType="java.lang.String" resultType="java.util.HashMap" >
           select epl.func_no fid, epl.p_part_no pid, epl.seq seq, epl.bom_level lev, epl.part_no cid, epl.part_name cname, epl.u_in_eco_team grp, epl.u_in_eco_owner ownr
            from hbom_tc_epl epl
               , hbom_tc_epl_job job
               , nmcd_mgmt nmcd 
            where epl.job_puid = job.job_puid
            and job.what_epl_job = 'V'
            and epl.product_no = #{PRD_NO, jdbcType=VARCHAR}
            and nmcd.product_number (+) = epl.product_no
            and nmcd.function_number (+) = epl.func_no
            and nmcd.parent_number (+) = epl.p_part_no
            and nmcd.child_number (+) = epl.part_no
            and nmcd.nmcd is  null
            order by epl_seq
    </select>
    
    <select id="getVnetTeamNameK" parameterType="java.lang.String" resultType="java.util.HashMap" >
            select team
            from sysa01tb
            where length(tmcod) >= 8
            and app in ('0','2')
            order by team
    </select>
    
</mapper>